/**
 *
 */

#ifndef __DDR_DDR34LMC_REG_FIELD_H__
#define __DDR_DDR34LMC_REG_FIELD_H__


#include "../../mivem_types.h"
#include "../../mivem_macro.h"


#define DDR34LMC_RANK_N     4
#define DDR34LMC_PORT_N     4

#ifdef DDR34LMC_USE_DDR4
#define DDR34LMC_SMR_N      7
#else
#define DDR34LMC_SMR_N      4
#endif

BEGIN_ENUM( DDR34LMC_MCSTAT_FIELD )
DECLARE_ENUM_VAL( DDR34LMC_MCSTAT_INIT_COMPLETE_e,      0 )
DECLARE_ENUM_VAL( DDR34LMC_MCSTAT_INIT_COMPLETE_i,      IBM_BIT_INDEX(32, DDR34LMC_MCSTAT_INIT_COMPLETE_e) )
DECLARE_ENUM_VAL( DDR34LMC_MCSTAT_INIT_COMPLETE_n,      1 )
DECLARE_ENUM_VAL( DDR34LMC_MCSTAT_SELF_REF_MODE_e,      1 )
DECLARE_ENUM_VAL( DDR34LMC_MCSTAT_SELF_REF_MODE_i,      IBM_BIT_INDEX(32, DDR34LMC_MCSTAT_SELF_REF_MODE_e) )
DECLARE_ENUM_VAL( DDR34LMC_MCSTAT_SELF_REF_MODE_n,      1 )
DECLARE_ENUM_VAL( DDR34LMC_MCSTAT_IDLE_e,               2 )
DECLARE_ENUM_VAL( DDR34LMC_MCSTAT_IDLE_i,               IBM_BIT_INDEX(32, DDR34LMC_MCSTAT_IDLE_e) )
DECLARE_ENUM_VAL( DDR34LMC_MCSTAT_IDLE_n,               1 )
DECLARE_ENUM_VAL( DDR34LMC_MCSTAT_DFI_INIT_COMPLETE_e,  3 )
DECLARE_ENUM_VAL( DDR34LMC_MCSTAT_DFI_INIT_COMPLETE_i,  IBM_BIT_INDEX(32, DDR34LMC_MCSTAT_DFI_INIT_COMPLETE_e) )
DECLARE_ENUM_VAL( DDR34LMC_MCSTAT_DFI_INIT_COMPLETE_n,  1 )
DECLARE_ENUM_VAL( DDR34LMC_MCSTAT_PREFILL_COMPLETE_e,   4 )
DECLARE_ENUM_VAL( DDR34LMC_MCSTAT_PREFILL_COMPLETE_i,   IBM_BIT_INDEX(32, DDR34LMC_MCSTAT_PREFILL_COMPLETE_e) )
DECLARE_ENUM_VAL( DDR34LMC_MCSTAT_PREFILL_COMPLETE_n,   1 )
END_ENUM( DDR34LMC_MCSTAT_FIELD )


BEGIN_ENUM( DDR34LMC_DDR34LMC_MCOPT1_FIELD )
DECLARE_ENUM_VAL( DDR34LMC_MCOPT1_PROTOCOL_e,       0 )
DECLARE_ENUM_VAL( DDR34LMC_MCOPT1_PROTOCOL_i,       IBM_BIT_INDEX(32, DDR34LMC_MCOPT1_PROTOCOL_e) )
DECLARE_ENUM_VAL( DDR34LMC_MCOPT1_PROTOCOL_n,       1 )
DECLARE_ENUM_VAL( DDR34LMC_MCOPT1_DM_ENABLE_e,      1 )
DECLARE_ENUM_VAL( DDR34LMC_MCOPT1_DM_ENABLE_i,      IBM_BIT_INDEX(32, DDR34LMC_MCOPT1_DM_ENABLE_e) )
DECLARE_ENUM_VAL( DDR34LMC_MCOPT1_DM_ENABLE_n,      1 )
DECLARE_ENUM_VAL( DDR34LMC_MCOPT1_ECC_EN_e,         2 )
DECLARE_ENUM_VAL( DDR34LMC_MCOPT1_ECC_EN_i,         IBM_BIT_INDEX(32, DDR34LMC_MCOPT1_ECC_EN_e) )
DECLARE_ENUM_VAL( DDR34LMC_MCOPT1_ECC_EN_n,         1 )
DECLARE_ENUM_VAL( DDR34LMC_MCOPT1_ECC_COR_e,        3 )
DECLARE_ENUM_VAL( DDR34LMC_MCOPT1_ECC_COR_i,        IBM_BIT_INDEX(32, DDR34LMC_MCOPT1_ECC_COR_e) )
DECLARE_ENUM_VAL( DDR34LMC_MCOPT1_ECC_COR_n,        1 )
DECLARE_ENUM_VAL( DDR34LMC_MCOPT1_RDIMM_e,          4 )
DECLARE_ENUM_VAL( DDR34LMC_MCOPT1_RDIMM_i,          IBM_BIT_INDEX(32, DDR34LMC_MCOPT1_RDIMM_e) )
DECLARE_ENUM_VAL( DDR34LMC_MCOPT1_RDIMM_n,          1 )
DECLARE_ENUM_VAL( DDR34LMC_MCOPT1_PMUM_e,           6 )
DECLARE_ENUM_VAL( DDR34LMC_MCOPT1_PMUM_i,           IBM_BIT_INDEX(32, DDR34LMC_MCOPT1_PMUM_e) )
DECLARE_ENUM_VAL( DDR34LMC_MCOPT1_PMUM_n,           2 )
DECLARE_ENUM_VAL( DDR34LMC_MCOPT1_WIDTH_0_e,        7 )
DECLARE_ENUM_VAL( DDR34LMC_MCOPT1_WIDTH_0_i,        IBM_BIT_INDEX(32, DDR34LMC_MCOPT1_WIDTH_0_e) )
DECLARE_ENUM_VAL( DDR34LMC_MCOPT1_WIDTH_0_n,        1 )
DECLARE_ENUM_VAL( DDR34LMC_MCOPT1_PORT_ID_CHK_EN_e, 8 )
DECLARE_ENUM_VAL( DDR34LMC_MCOPT1_PORT_ID_CHK_EN_i, IBM_BIT_INDEX(32, DDR34LMC_MCOPT1_PORT_ID_CHK_EN_e) )
DECLARE_ENUM_VAL( DDR34LMC_MCOPT1_PORT_ID_CHK_EN_n, 1 )
DECLARE_ENUM_VAL( DDR34LMC_MCOPT1_UIOS_e,           9 )
DECLARE_ENUM_VAL( DDR34LMC_MCOPT1_UIOS_i,           IBM_BIT_INDEX(32, DDR34LMC_MCOPT1_UIOS_e) )
DECLARE_ENUM_VAL( DDR34LMC_MCOPT1_UIOS_n,           1 )
DECLARE_ENUM_VAL( DDR34LMC_MCOPT1_QUADCS_RDIMM_e,   10 )
DECLARE_ENUM_VAL( DDR34LMC_MCOPT1_QUADCS_RDIMM_i,   IBM_BIT_INDEX(32, DDR34LMC_MCOPT1_QUADCS_RDIMM_e) )
DECLARE_ENUM_VAL( DDR34LMC_MCOPT1_QUADCS_RDIMM_n,   1 )
DECLARE_ENUM_VAL( DDR34LMC_MCOPT1_ZQCL_EN_e,        11 )
DECLARE_ENUM_VAL( DDR34LMC_MCOPT1_ZQCL_EN_i,        IBM_BIT_INDEX(32, DDR34LMC_MCOPT1_ZQCL_EN_e) )
DECLARE_ENUM_VAL( DDR34LMC_MCOPT1_ZQCL_EN_n,        1 )
DECLARE_ENUM_VAL( DDR34LMC_MCOPT1_WIDTH_1_e,        12 )
DECLARE_ENUM_VAL( DDR34LMC_MCOPT1_WIDTH_1_i,        IBM_BIT_INDEX(32, DDR34LMC_MCOPT1_WIDTH_1_e) )
DECLARE_ENUM_VAL( DDR34LMC_MCOPT1_WIDTH_1_n,        1 )
DECLARE_ENUM_VAL( DDR34LMC_MCOPT1_WD_DLY_e,         13 )
DECLARE_ENUM_VAL( DDR34LMC_MCOPT1_WD_DLY_i,         IBM_BIT_INDEX(32, DDR34LMC_MCOPT1_WD_DLY_e) )
DECLARE_ENUM_VAL( DDR34LMC_MCOPT1_WD_DLY_n,         1 )
DECLARE_ENUM_VAL( DDR34LMC_MCOPT1_QDEPTH_e,         14 )
DECLARE_ENUM_VAL( DDR34LMC_MCOPT1_QDEPTH_i,         IBM_BIT_INDEX(32, DDR34LMC_MCOPT1_QDEPTH_e) )
DECLARE_ENUM_VAL( DDR34LMC_MCOPT1_QDEPTH_n,         2 )
DECLARE_ENUM_VAL( DDR34LMC_MCOPT1_RWOO_e,           16 )
DECLARE_ENUM_VAL( DDR34LMC_MCOPT1_RWOO_i,           IBM_BIT_INDEX(32, DDR34LMC_MCOPT1_RWOO_e) )
DECLARE_ENUM_VAL( DDR34LMC_MCOPT1_RWOO_n,           1 )
DECLARE_ENUM_VAL( DDR34LMC_MCOPT1_WOOO_e,           17 )
DECLARE_ENUM_VAL( DDR34LMC_MCOPT1_WOOO_i,           IBM_BIT_INDEX(32, DDR34LMC_MCOPT1_WOOO_e) )
DECLARE_ENUM_VAL( DDR34LMC_MCOPT1_WOOO_n,           1 )
DECLARE_ENUM_VAL( DDR34LMC_MCOPT1_DCOO_e,           18 )
DECLARE_ENUM_VAL( DDR34LMC_MCOPT1_DCOO_i,           IBM_BIT_INDEX(32, DDR34LMC_MCOPT1_DCOO_e) )
DECLARE_ENUM_VAL( DDR34LMC_MCOPT1_DCOO_n,           1 )
DECLARE_ENUM_VAL( DDR34LMC_MCOPT1_DEF_REF_e,        19 )
DECLARE_ENUM_VAL( DDR34LMC_MCOPT1_DEF_REF_i,        IBM_BIT_INDEX(32, DDR34LMC_MCOPT1_DEF_REF_e) )
DECLARE_ENUM_VAL( DDR34LMC_MCOPT1_DEF_REF_n,        1 )
DECLARE_ENUM_VAL( DDR34LMC_MCOPT1_DEV_TYPE_e,       20 )
DECLARE_ENUM_VAL( DDR34LMC_MCOPT1_DEV_TYPE_i,       IBM_BIT_INDEX(32, DDR34LMC_MCOPT1_DEV_TYPE_e) )
DECLARE_ENUM_VAL( DDR34LMC_MCOPT1_DEV_TYPE_n,       1 )
DECLARE_ENUM_VAL( DDR34LMC_MCOPT1_CA_PTY_DLY_e,     21 )
DECLARE_ENUM_VAL( DDR34LMC_MCOPT1_CA_PTY_DLY_i,     IBM_BIT_INDEX(32, DDR34LMC_MCOPT1_CA_PTY_DLY_e) )
DECLARE_ENUM_VAL( DDR34LMC_MCOPT1_CA_PTY_DLY_n,     1 )
DECLARE_ENUM_VAL( DDR34LMC_MCOPT1_ECC_MUX_e,        23 )
DECLARE_ENUM_VAL( DDR34LMC_MCOPT1_ECC_MUX_i,        IBM_BIT_INDEX(32, DDR34LMC_MCOPT1_ECC_MUX_e) )
DECLARE_ENUM_VAL( DDR34LMC_MCOPT1_ECC_MUX_n,        2 )
DECLARE_ENUM_VAL( DDR34LMC_MCOPT1_CE_THRESHOLD_e,   31 )
DECLARE_ENUM_VAL( DDR34LMC_MCOPT1_CE_THRESHOLD_i,   IBM_BIT_INDEX(32, DDR34LMC_MCOPT1_CE_THRESHOLD_e) )
DECLARE_ENUM_VAL( DDR34LMC_MCOPT1_CE_THRESHOLD_n,   8 )
END_ENUM( DDR34LMC_DDR34LMC_MCOPT1_FIELD )

BEGIN_ENUM( DDR34LMC_PROTOCOL )
DECLARE_ENUM_VAL( DDR34LMC_PROTOCOL_DDR3,   0b0 )
DECLARE_ENUM_VAL( DDR34LMC_PROTOCOL_DDR4,   0b1 )
END_ENUM( DDR34LMC_PROTOCOL )

BEGIN_ENUM( DDR34LMC_PMUM )
DECLARE_ENUM_VAL( DDR34LMC_PMUM_Close,      0b00 ) // Always close pages after a read or write command is completed on the MCIF
DECLARE_ENUM_VAL( DDR34LMC_PMUM_AutoClose,  0b01 ) // Close pages after a read or write unless an additional request for that page is queued
DECLARE_ENUM_VAL( DDR34LMC_PMUM_Open,       0b10 ) // After use, pages remain open until a read or write to a different page is queued or a memory refresh is done
END_ENUM( DDR34LMC_PMUM )

BEGIN_ENUM( DDR34LMC_WIDTH_RATIO )  // For DFI 1:1 MC to PHY Clock Frequency Ratio Mode (IBM PHY 2:1 data multi- plexing mode):
DECLARE_ENUM_VAL( DDR34LMC_WIDTH_RATIO_Quarter, 0b00 ) // Quarter MCIF data width mode (Quarter mode)
DECLARE_ENUM_VAL( DDR34LMC_WIDTH_RATIO_Half,    0b10 ) // Half MCIF data width mode (Half mode)
DECLARE_ENUM_VAL( DDR34LMC_WIDTH_RATIO_Eighth1, 0b01 ) // Eighth MCIF data width mode (Eighth mode)
DECLARE_ENUM_VAL( DDR34LMC_WIDTH_RATIO_Eighth2, 0b11 ) // Eighth MCIF data width mode (Eighth mode)
END_ENUM( DDR34LMC_WIDTH_RATIO )

BEGIN_ENUM( DDR34LMC_UIOS )
DECLARE_ENUM_VAL( DDR34LMC_UIOS_Active,     0b0 )  // Hi-Z on read, driven on write
DECLARE_ENUM_VAL( DDR34LMC_UIOS_Tristated,  0b1 )  // always High-Z
END_ENUM( DDR34LMC_UIOS )

BEGIN_ENUM( DDR34LMC_WD_DLY )
DECLARE_ENUM_VAL( DDR34LMC_WD_DLY_1_cycle_Twr_resp_lat_timing,  0b0 )
DECLARE_ENUM_VAL( DDR34LMC_WD_DLY_2_cycle_Twr_resp_lat_timing,  0b1 )
END_ENUM( DDR34LMC_WD_DLY )

BEGIN_ENUM( DDR34LMC_QDEPTH )
DECLARE_ENUM_VAL( DDR34LMC_QDEPTH_4_MCIF_cmds,  0b10 ) // Queue is 4 MCIF commands deep
DECLARE_ENUM_VAL( DDR34LMC_QDEPTH_8_MCIF_cmds,  0b11 ) // Queue is 8 MCIF commands deep
END_ENUM( DDR34LMC_QDEPTH )

BEGIN_ENUM( DDR34LMC_REFRESH )
DECLARE_ENUM_VAL( DDR34LMC_REFRESH_Normal,  0b0 )  // Normal Refresh
DECLARE_ENUM_VAL( DDR34LMC_REFRESH_Defered, 0b1 )  // Defer up to four refresh commands if the core has one or more queued write and/or read commands
END_ENUM( DDR34LMC_REFRESH )

BEGIN_ENUM( DDR34LMC_DEV_TYPE )
DECLARE_ENUM_VAL( DDR34LMC_DEV_TYPE_x4_x8_wide, 0b0 )  // x4 or x8 wide memory devices
DECLARE_ENUM_VAL( DDR34LMC_DEV_TYPE_x16_wide,   0b1 )  // x16 wide memory devices
END_ENUM( DDR34LMC_DEV_TYPE )

BEGIN_ENUM( DDR34LMC_CA_PTY_DLY )
DECLARE_ENUM_VAL( DDR34LMC_CA_PTY_DLY_same_clock,   0b0 )  // O_DFI_PARITY_IN and O_DFI_PARITY_IN_X are aligned to the same DDR clock cycle as the Commands/Addresses they protect
DECLARE_ENUM_VAL( DDR34LMC_CA_PTY_DLY_clock_before, 0b1 )  // O_DFI_PARITY_IN and O_DFI_PARITY_IN_X occur one DDR clock cycle before the Commands/Addresses they protect
END_ENUM( DDR34LMC_CA_PTY_DLY )

BEGIN_ENUM( DDR34LMC_ECC_MUX )
DECLARE_ENUM_VAL( DDR34LMC_ECC_MUX_O_DFI_WR_swap,   0b01 ) // Causes the ECC byte (O_DFI_WR_DATA[DFI_DATA_WIDTH+DFI_EC-C_WIDTH-1:DFI_DATA_WIDTH]) to be swapped with the high-order data byte (O_DFI_WR_DATA[DFI_DATA_WIDTH-1:DFI_DATA_WIDTH-DFI_EC- C_WIDTH]) on the DFI interface
DECLARE_ENUM_VAL( DDR34LMC_ECC_MUX_I_DFI_RD_swap,   0b10 ) // Causes the ECC byte (I_DFI_RD_DATA[DFI_DATA_WIDTH+DFI_EC-C_WIDTH-1:DFI_DATA_WIDTH]) to be swapped with the high-order data byte (I_DFI_RD_DATA[DFI_DATA_WIDTH-1:DFI_DATA_WIDTH-DFI_ECC_WIDTH]) on the DFI interface
END_ENUM( DDR34LMC_ECC_MUX )


BEGIN_ENUM( DDR34LMC_MCOPT2_FIELD )
DECLARE_ENUM_VAL( DDR34LMC_MCOPT2_SELF_REF_EN_e,        0 )
DECLARE_ENUM_VAL( DDR34LMC_MCOPT2_SELF_REF_EN_i,        IBM_BIT_INDEX(32, DDR34LMC_MCOPT2_SELF_REF_EN_e) )
DECLARE_ENUM_VAL( DDR34LMC_MCOPT2_SELF_REF_EN_n,        1 )
DECLARE_ENUM_VAL( DDR34LMC_MCOPT2_XSR_PREVENT_e,        1 )
DECLARE_ENUM_VAL( DDR34LMC_MCOPT2_XSR_PREVENT_i,        IBM_BIT_INDEX(32, DDR34LMC_MCOPT2_XSR_PREVENT_e) )
DECLARE_ENUM_VAL( DDR34LMC_MCOPT2_XSR_PREVENT_n,        1 )
DECLARE_ENUM_VAL( DDR34LMC_MCOPT2_INIT_START_e,         2 )
DECLARE_ENUM_VAL( DDR34LMC_MCOPT2_INIT_START_i,         IBM_BIT_INDEX(32, DDR34LMC_MCOPT2_INIT_START_e) )
DECLARE_ENUM_VAL( DDR34LMC_MCOPT2_INIT_START_n,         1 )
DECLARE_ENUM_VAL( DDR34LMC_MCOPT2_MC_ENABLE_e,          3 )
DECLARE_ENUM_VAL( DDR34LMC_MCOPT2_MC_ENABLE_i,          IBM_BIT_INDEX(32, DDR34LMC_MCOPT2_MC_ENABLE_e) )
DECLARE_ENUM_VAL( DDR34LMC_MCOPT2_MC_ENABLE_n,          1 )
DECLARE_ENUM_VAL( DDR34LMC_MCOPT2_CLK_DISABLE_e,        7 )
DECLARE_ENUM_VAL( DDR34LMC_MCOPT2_CLK_DISABLE_i,        IBM_BIT_INDEX(32, DDR34LMC_MCOPT2_CLK_DISABLE_e) )
DECLARE_ENUM_VAL( DDR34LMC_MCOPT2_CLK_DISABLE_n,        4 )
DECLARE_ENUM_VAL( DDR34LMC_MCOPT2_RESET_RANK_e,         11 )
DECLARE_ENUM_VAL( DDR34LMC_MCOPT2_RESET_RANK_i,         IBM_BIT_INDEX(32, DDR34LMC_MCOPT2_RESET_RANK_e) )
DECLARE_ENUM_VAL( DDR34LMC_MCOPT2_RESET_RANK_n,         4 )
DECLARE_ENUM_VAL( DDR34LMC_MCOPT2_CMD_COMP_PTY_EN_e,    12 )
DECLARE_ENUM_VAL( DDR34LMC_MCOPT2_CMD_COMP_PTY_EN_i,    IBM_BIT_INDEX(32, DDR34LMC_MCOPT2_CMD_COMP_PTY_EN_e) )
DECLARE_ENUM_VAL( DDR34LMC_MCOPT2_CMD_COMP_PTY_EN_n,    1 )
DECLARE_ENUM_VAL( DDR34LMC_MCOPT2_CKE_OE_e,             14 )
DECLARE_ENUM_VAL( DDR34LMC_MCOPT2_CKE_OE_i,             IBM_BIT_INDEX(32, DDR34LMC_MCOPT2_CKE_OE_e) )
DECLARE_ENUM_VAL( DDR34LMC_MCOPT2_CKE_OE_n,             1 )
DECLARE_ENUM_VAL( DDR34LMC_MCOPT2_RESET_OE_e,           15 )
DECLARE_ENUM_VAL( DDR34LMC_MCOPT2_RESET_OE_i,           IBM_BIT_INDEX(32, DDR34LMC_MCOPT2_RESET_OE_e) )
DECLARE_ENUM_VAL( DDR34LMC_MCOPT2_RESET_OE_n,           1 )
DECLARE_ENUM_VAL( DDR34LMC_MCOPT2_DFI_PHYUD_CNTL_e,     17 )
DECLARE_ENUM_VAL( DDR34LMC_MCOPT2_DFI_PHYUD_CNTL_i,     IBM_BIT_INDEX(32, DDR34LMC_MCOPT2_DFI_PHYUD_CNTL_e) )
DECLARE_ENUM_VAL( DDR34LMC_MCOPT2_DFI_PHYUD_CNTL_n,     1 )
DECLARE_ENUM_VAL( DDR34LMC_MCOPT2_DFI_PHYUD_ACK_e,      18 )
DECLARE_ENUM_VAL( DDR34LMC_MCOPT2_DFI_PHYUD_ACK_i,      IBM_BIT_INDEX(32, DDR34LMC_MCOPT2_DFI_PHYUD_ACK_e) )
DECLARE_ENUM_VAL( DDR34LMC_MCOPT2_DFI_PHYUD_ACK_n,      1 )
DECLARE_ENUM_VAL( DDR34LMC_MCOPT2_DFI_INIT_START_e,     19 )
DECLARE_ENUM_VAL( DDR34LMC_MCOPT2_DFI_INIT_START_i,     IBM_BIT_INDEX(32, DDR34LMC_MCOPT2_DFI_INIT_START_e) )
DECLARE_ENUM_VAL( DDR34LMC_MCOPT2_DFI_INIT_START_n,     1 )
DECLARE_ENUM_VAL( DDR34LMC_MCOPT2_PM_ENABLE_e,          23 )
DECLARE_ENUM_VAL( DDR34LMC_MCOPT2_PM_ENABLE_i,          IBM_BIT_INDEX(32, DDR34LMC_MCOPT2_PM_ENABLE_e) )
DECLARE_ENUM_VAL( DDR34LMC_MCOPT2_PM_ENABLE_n,          4 )
DECLARE_ENUM_VAL( DDR34LMC_MCOPT2_RD_DEFREF_CNT_e,      27 )
DECLARE_ENUM_VAL( DDR34LMC_MCOPT2_RD_DEFREF_CNT_i,      IBM_BIT_INDEX(32, DDR34LMC_MCOPT2_RD_DEFREF_CNT_e) )
DECLARE_ENUM_VAL( DDR34LMC_MCOPT2_RD_DEFREF_CNT_n,      4 )
END_ENUM( DDR34LMC_MCOPT2_FIELD )


BEGIN_ENUM( DDR34LMC_DFI_PHYUD_CNTL )
DECLARE_ENUM_VAL( DDR34LMC_DFI_PHYUD_CNTL_Hardware, 0b0 )  // Hardware controls acknowledgment of PHY update requests on the DFI interface
DECLARE_ENUM_VAL( DDR34LMC_DFI_PHYUD_CNTL_Software, 0b1 )  // Software controls acknowledgment of PHY update requests on the DFI interface
END_ENUM( DDR34LMC_DFI_PHYUD_CNTL )

BEGIN_ENUM( DDR34LMC_PM_ENABLE )
DECLARE_ENUM_VAL( DDR34LMC_PM_ENABLE_domain1_stat_clk_gating,   (1 << 3) ) // Enable static configuration-dependent clock gating for clock domain #1
DECLARE_ENUM_VAL( DDR34LMC_PM_ENABLE_domain1_dyn_clk_gating,    (1 << 2) ) // Enable dynamic clock gating for clock domain #1
DECLARE_ENUM_VAL( DDR34LMC_PM_ENABLE_domain2_dyn_clk_gating,    (1 << 1) ) // Enable dynamic clock gating for clock domain #2
DECLARE_ENUM_VAL( DDR34LMC_PM_ENABLE_ret_high_Z,                (1 << 0) ) // Enable Return to High-Z on DDR Interface
END_ENUM( DDR34LMC_PM_ENABLE )



BEGIN_ENUM( DDR34LMC_IOCNTL_FIELD )
DECLARE_ENUM_VAL( DDR34LMC_IOCNTL_e,    31 )
DECLARE_ENUM_VAL( DDR34LMC_IOCNTL_i,    IBM_BIT_INDEX(32, DDR34LMC_IOCNTL_e) )
DECLARE_ENUM_VAL( DDR34LMC_IOCNTL_n,    32 )
END_ENUM( DDR34LMC_IOCNTL_FIELD )


BEGIN_ENUM( DDR34LMC_PHYCNTL_FIELD )
DECLARE_ENUM_VAL( DDR34LMC_PHYCNTL_e,   31 )
DECLARE_ENUM_VAL( DDR34LMC_PHYCNTL_i,   IBM_BIT_INDEX(32, DDR34LMC_PHYCNTL_e) )
DECLARE_ENUM_VAL( DDR34LMC_PHYCNTL_n,   32 )
END_ENUM( DDR34LMC_PHYCNTL_FIELD )


BEGIN_ENUM( DDR34LMC_PHYSTAT_FIELD )
DECLARE_ENUM_VAL( DDR34LMC_PHYSTAT_e,   31 )
DECLARE_ENUM_VAL( DDR34LMC_PHYSTAT_i,   IBM_BIT_INDEX(32, DDR34LMC_PHYSTAT_e) )
DECLARE_ENUM_VAL( DDR34LMC_PHYSTAT_n,   32 )
END_ENUM( DDR34LMC_PHYSTAT_FIELD )


BEGIN_ENUM( DDR34LMC_PHYMASK_FIELD )
DECLARE_ENUM_VAL( DDR34LMC_PHYMASK_e,   31 )
DECLARE_ENUM_VAL( DDR34LMC_PHYMASK_i,   IBM_BIT_INDEX(32, DDR34LMC_PHYMASK_e) )
DECLARE_ENUM_VAL( DDR34LMC_PHYMASK_n,   32 )
END_ENUM( DDR34LMC_PHYMASK_FIELD )


BEGIN_ENUM( DDR34LMC_CFGRx_FIELD )
DECLARE_ENUM_VAL( DDR34LMC_CFGRx_ROW_WIDTH_e,   19 )
DECLARE_ENUM_VAL( DDR34LMC_CFGRx_ROW_WIDTH_i,   IBM_BIT_INDEX(32, DDR34LMC_CFGRx_ROW_WIDTH_e) )
DECLARE_ENUM_VAL( DDR34LMC_CFGRx_ROW_WIDTH_n,   3 )
DECLARE_ENUM_VAL( DDR34LMC_CFGRx_ADDR_MODE_e,   23 )
DECLARE_ENUM_VAL( DDR34LMC_CFGRx_ADDR_MODE_i,   IBM_BIT_INDEX(32, DDR34LMC_CFGRx_ADDR_MODE_e) )
DECLARE_ENUM_VAL( DDR34LMC_CFGRx_ADDR_MODE_n,   4 )
DECLARE_ENUM_VAL( DDR34LMC_CFGRx_MIRROR_e,      27 )                                            // When enabled (that is, when MCOPT1[PROTOCOL]=0 or MCOPT1[RDIMM]=0), the following SDRAM address pins are swapped:
DECLARE_ENUM_VAL( DDR34LMC_CFGRx_MIRROR_i,      IBM_BIT_INDEX(32, DDR34LMC_CFGRx_MIRROR_e) )    // A3<=>A4, A5<=>A6, A7<=>A8, BA0<=>BA1
DECLARE_ENUM_VAL( DDR34LMC_CFGRx_MIRROR_n,      1 )
DECLARE_ENUM_VAL( DDR34LMC_CFGRx_RANK_ENABLE_e, 31 )
DECLARE_ENUM_VAL( DDR34LMC_CFGRx_RANK_ENABLE_i, IBM_BIT_INDEX(32, DDR34LMC_CFGRx_RANK_ENABLE_e) )
DECLARE_ENUM_VAL( DDR34LMC_CFGRx_RANK_ENABLE_n, 1 )
END_ENUM( DDR34LMC_CFGRx_FIELD )

BEGIN_ENUM( DDR34LMC_RANK_ADDR_MODE )
DECLARE_ENUM_VAL( DDR34LMC_RANK_ADDR_MODE2, 0b0010 )   // Mode 2 = Nx10 (8-bank)
DECLARE_ENUM_VAL( DDR34LMC_RANK_ADDR_MODE3, 0b0011 )   // Mode 3 = Nx11 (8-bank)
DECLARE_ENUM_VAL( DDR34LMC_RANK_ADDR_MODE4, 0b0100 )   // Mode 4 = Nx12 (8-bank)
END_ENUM( DDR34LMC_RANK_ADDR_MODE )


BEGIN_ENUM( DDR34LMC_RHZEN_FIELD )
DECLARE_ENUM_VAL( DDR34LMC_RHZEN_ENHZ_ADDRESS_e,    15 )
DECLARE_ENUM_VAL( DDR34LMC_RHZEN_ENHZ_ADDRESS_i,    IBM_BIT_INDEX(32, DDR34LMC_RHZEN_ENHZ_ADDRESS_e) )
DECLARE_ENUM_VAL( DDR34LMC_RHZEN_ENHZ_ADDRESS_n,    16 )
DECLARE_ENUM_VAL( DDR34LMC_RHZEN_ENHZ_BANK_e,       18 )
//IBM_REG32_FIELD( DDR34LMC_RHZEN_ENHZ_ACTN,    19, 1 ), Active signal (O_DFI_ACT_N) output enable,DDR4 only
DECLARE_ENUM_VAL( DDR34LMC_RHZEN_ENHZ_BANK_i,       IBM_BIT_INDEX(32, DDR34LMC_RHZEN_ENHZ_BANK_e) )
DECLARE_ENUM_VAL( DDR34LMC_RHZEN_ENHZ_BANK_n,       3 )
DECLARE_ENUM_VAL( DDR34LMC_RHZEN_ENHZ_RASN_e,       20 )
DECLARE_ENUM_VAL( DDR34LMC_RHZEN_ENHZ_RASN_i,       IBM_BIT_INDEX(32, DDR34LMC_RHZEN_ENHZ_RASN_e) )
DECLARE_ENUM_VAL( DDR34LMC_RHZEN_ENHZ_RASN_n,       1 )
DECLARE_ENUM_VAL( DDR34LMC_RHZEN_ENHZ_CASN_e,       21 )
DECLARE_ENUM_VAL( DDR34LMC_RHZEN_ENHZ_CASN_i,       IBM_BIT_INDEX(32, DDR34LMC_RHZEN_ENHZ_CASN_e) )
DECLARE_ENUM_VAL( DDR34LMC_RHZEN_ENHZ_CASN_n,       1 )
DECLARE_ENUM_VAL( DDR34LMC_RHZEN_ENHZ_WEN_e,        22 )
DECLARE_ENUM_VAL( DDR34LMC_RHZEN_ENHZ_WEN_i,        IBM_BIT_INDEX(32, DDR34LMC_RHZEN_ENHZ_WEN_e) )
DECLARE_ENUM_VAL( DDR34LMC_RHZEN_ENHZ_WEN_n,        1 )
DECLARE_ENUM_VAL( DDR34LMC_RHZEN_ENHZ_PARITY_IN_e,  23 )
DECLARE_ENUM_VAL( DDR34LMC_RHZEN_ENHZ_PARITY_IN_i,  IBM_BIT_INDEX(32, DDR34LMC_RHZEN_ENHZ_PARITY_IN_e) )
DECLARE_ENUM_VAL( DDR34LMC_RHZEN_ENHZ_PARITY_IN_n,  1 )
DECLARE_ENUM_VAL( DDR34LMC_RHZEN_ENHZ_CSN_e,        27 )
DECLARE_ENUM_VAL( DDR34LMC_RHZEN_ENHZ_CSN_i,        IBM_BIT_INDEX(32, DDR34LMC_RHZEN_ENHZ_CSN_e) )
DECLARE_ENUM_VAL( DDR34LMC_RHZEN_ENHZ_CSN_n,        4 )
DECLARE_ENUM_VAL( DDR34LMC_RHZEN_ENHZ_ODT_e,        31 )
DECLARE_ENUM_VAL( DDR34LMC_RHZEN_ENHZ_ODT_i,        IBM_BIT_INDEX(32, DDR34LMC_RHZEN_ENHZ_ODT_e) )
DECLARE_ENUM_VAL( DDR34LMC_RHZEN_ENHZ_ODT_n,        4 )
END_ENUM( DDR34LMC_RHZEN_FIELD )


BEGIN_ENUM( DDR34LMC_INITSEQx_FIELD )
DECLARE_ENUM_VAL( DDR34LMC_INITSEQx_ENABLE_e,               0 )
DECLARE_ENUM_VAL( DDR34LMC_INITSEQx_ENABLE_i,               IBM_BIT_INDEX(32, DDR34LMC_INITSEQx_ENABLE_e) )
DECLARE_ENUM_VAL( DDR34LMC_INITSEQx_ENABLE_n,               1 )
DECLARE_ENUM_VAL( DDR34LMC_INITSEQx_WAIT_e,                 15 )
DECLARE_ENUM_VAL( DDR34LMC_INITSEQx_WAIT_i,                 IBM_BIT_INDEX(32, DDR34LMC_INITSEQx_WAIT_e) )
DECLARE_ENUM_VAL( DDR34LMC_INITSEQx_WAIT_n,                 12 )
DECLARE_ENUM_VAL( DDR34LMC_INITSEQx_EN_MULTI_RANK_SELECT_e, 27 )
DECLARE_ENUM_VAL( DDR34LMC_INITSEQx_EN_MULTI_RANK_SELECT_i, IBM_BIT_INDEX(32, DDR34LMC_INITSEQx_EN_MULTI_RANK_SELECT_e) )
DECLARE_ENUM_VAL( DDR34LMC_INITSEQx_EN_MULTI_RANK_SELECT_n, 1 )
DECLARE_ENUM_VAL( DDR34LMC_INITSEQx_RANK_e,                 31 )
DECLARE_ENUM_VAL( DDR34LMC_INITSEQx_RANK_i,                 IBM_BIT_INDEX(32, DDR34LMC_INITSEQx_RANK_e) )
DECLARE_ENUM_VAL( DDR34LMC_INITSEQx_RANK_n,                 4 )
END_ENUM( DDR34LMC_INITSEQx_FIELD )


BEGIN_ENUM( DDR34LMC_SDTR0_FIELD )
DECLARE_ENUM_VAL( DDR34LMC_SDTR0_T_REFI_e,      15 )
DECLARE_ENUM_VAL( DDR34LMC_SDTR0_T_REFI_i,      IBM_BIT_INDEX(32, DDR34LMC_SDTR0_T_REFI_e) )
DECLARE_ENUM_VAL( DDR34LMC_SDTR0_T_REFI_n,      16 )
DECLARE_ENUM_VAL( DDR34LMC_SDTR0_T_RFC_XPR_e,   31 )
DECLARE_ENUM_VAL( DDR34LMC_SDTR0_T_RFC_XPR_i,   IBM_BIT_INDEX(32, DDR34LMC_SDTR0_T_RFC_XPR_e) )
DECLARE_ENUM_VAL( DDR34LMC_SDTR0_T_RFC_XPR_n,   12 )
END_ENUM( DDR34LMC_SDTR0_FIELD )


BEGIN_ENUM( DDR34LMC_SDTR1_FIELD )
DECLARE_ENUM_VAL( DDR34LMC_SDTR1_T_LEADOFF_e,   0 )                                             // Command lead-off enable
DECLARE_ENUM_VAL( DDR34LMC_SDTR1_T_LEADOFF_i,   IBM_BIT_INDEX(32, DDR34LMC_SDTR1_T_LEADOFF_e) )
DECLARE_ENUM_VAL( DDR34LMC_SDTR1_T_LEADOFF_n,   1 )
DECLARE_ENUM_VAL( DDR34LMC_SDTR1_ODT_DELAY_e,   1 )                                             // ODT activation delay (In DDR clock cycles)
DECLARE_ENUM_VAL( DDR34LMC_SDTR1_ODT_DELAY_i,   IBM_BIT_INDEX(32, DDR34LMC_SDTR1_ODT_DELAY_e) )
DECLARE_ENUM_VAL( DDR34LMC_SDTR1_ODT_DELAY_n,   1 )
DECLARE_ENUM_VAL( DDR34LMC_SDTR1_ODT_WIDTH_e,   2 )                                             // ODT width contro
DECLARE_ENUM_VAL( DDR34LMC_SDTR1_ODT_WIDTH_i,   IBM_BIT_INDEX(32, DDR34LMC_SDTR1_ODT_WIDTH_e) )
DECLARE_ENUM_VAL( DDR34LMC_SDTR1_ODT_WIDTH_n,   1 )
DECLARE_ENUM_VAL( DDR34LMC_SDTR1_T_WTRO_e,      7 )                                             // Write to read bus turnaround delay (other CS) (In DDR clock cycles)
DECLARE_ENUM_VAL( DDR34LMC_SDTR1_T_WTRO_i,      IBM_BIT_INDEX(32, DDR34LMC_SDTR1_T_WTRO_e) )
DECLARE_ENUM_VAL( DDR34LMC_SDTR1_T_WTRO_n,      4 )
DECLARE_ENUM_VAL( DDR34LMC_SDTR1_T_RTWO_e,      15 )                                            // Read to write bus turnaround delay (other CS) (in DDR clock cycles)
DECLARE_ENUM_VAL( DDR34LMC_SDTR1_T_RTWO_i,      IBM_BIT_INDEX(32, DDR34LMC_SDTR1_T_RTWO_e) )
DECLARE_ENUM_VAL( DDR34LMC_SDTR1_T_RTWO_n,      4 )
DECLARE_ENUM_VAL( DDR34LMC_SDTR1_T_RTW_ADJ_e,   19 )                                            // Read to Write Bus Turnaround Delay Adjustment (same CS) (in DDR clock cycles)
DECLARE_ENUM_VAL( DDR34LMC_SDTR1_T_RTW_ADJ_i,   IBM_BIT_INDEX(32, DDR34LMC_SDTR1_T_RTW_ADJ_e) )
DECLARE_ENUM_VAL( DDR34LMC_SDTR1_T_RTW_ADJ_n,   4 )
DECLARE_ENUM_VAL( DDR34LMC_SDTR1_T_WTWO_e,      23 )                                            // Write to write rank switch delay (other CS) (In DDR clock cycles)
DECLARE_ENUM_VAL( DDR34LMC_SDTR1_T_WTWO_i,      IBM_BIT_INDEX(32, DDR34LMC_SDTR1_T_WTWO_e) )
DECLARE_ENUM_VAL( DDR34LMC_SDTR1_T_WTWO_n,      4 )
DECLARE_ENUM_VAL( DDR34LMC_SDTR1_T_RTRO_e,      31 )                                            // Read to read rank switch delay (other CS) (in DDR clock cycles)
DECLARE_ENUM_VAL( DDR34LMC_SDTR1_T_RTRO_i,      IBM_BIT_INDEX(32, DDR34LMC_SDTR1_T_RTRO_e) )
DECLARE_ENUM_VAL( DDR34LMC_SDTR1_T_RTRO_n,      4 )
END_ENUM( DDR34LMC_SDTR1_FIELD )

BEGIN_ENUM( DDR34LMC_T_LEADOFF )
DECLARE_ENUM_VAL( DDR34LMC_T_LEADOFF_1_cycle,   0 )    // Single cycle commands
DECLARE_ENUM_VAL( DDR34LMC_T_LEADOFF_2_cycle,   1 )    // Two cycle commands (2T timing)
END_ENUM( DDR34LMC_T_LEADOFF )

BEGIN_ENUM( DDR34LMC_ODT_DELAY )
DECLARE_ENUM_VAL( DDR34LMC_ODT_DELAY_same_clock,    0 )    // Activate the set of ODT signals in the same DDR clock cycle as O_DFI_CS_N[n]
DECLARE_ENUM_VAL( DDR34LMC_ODT_DELAY_clock_after,   1 )    // Activate the set of ODT signals in the DDR clock cycle following activation of O_DFI_CS_N[n]
END_ENUM( DDR34LMC_ODT_DELAY )

BEGIN_ENUM( DDR34LMC_ODT_WIDTH )
DECLARE_ENUM_VAL( DDR34LMC_ODT_WIDTH_4_6_clocks,    0 )    // Width of ODT signals is four or six DDR clock cycles for BC4 or BL8 transfers, respectively
DECLARE_ENUM_VAL( DDR34LMC_ODT_WIDTH_5_7_clocks,    1 )    // Width of ODT signals is five or seven DDR clock cycles for BC4 or BL8 transfers, respectively
END_ENUM( DDR34LMC_ODT_WIDTH )


BEGIN_ENUM( DDR34LMC_SDTR2_FIELD )
//IBM_REG32_FIELD( DDR34LMC_SDTR2_T_CWL,      0,  4 ),    // CAS write latency (only used in DDR4 mode) (In DDR clock cycles)
DECLARE_ENUM_VAL( DDR34LMC_SDTR2_T_RCD_1_4_e,   7 )                                             // Activate (RAS) to read/write command delay (tRCD, minimum) (In DDR clock cycles)
DECLARE_ENUM_VAL( DDR34LMC_SDTR2_T_RCD_1_4_i,   IBM_BIT_INDEX(32, DDR34LMC_SDTR2_T_RCD_1_4_e) )
DECLARE_ENUM_VAL( DDR34LMC_SDTR2_T_RCD_1_4_n,   4 )
DECLARE_ENUM_VAL( DDR34LMC_SDTR2_T_PL_e,        11 )                                             // Parity latency (in DDR clock cycles)
DECLARE_ENUM_VAL( DDR34LMC_SDTR2_T_PL_i,        IBM_BIT_INDEX(32, DDR34LMC_SDTR2_T_PL_e) )
DECLARE_ENUM_VAL( DDR34LMC_SDTR2_T_PL_n,        4 )
DECLARE_ENUM_VAL( DDR34LMC_SDTR2_T_RP_1_4_e,    15 )                                            // Precharge command period (tRP, minimum) (in DDR clock cycles)
DECLARE_ENUM_VAL( DDR34LMC_SDTR2_T_RP_1_4_i,    IBM_BIT_INDEX(32, DDR34LMC_SDTR2_T_RP_1_4_e) )
DECLARE_ENUM_VAL( DDR34LMC_SDTR2_T_RP_1_4_n,    4 )
DECLARE_ENUM_VAL( DDR34LMC_SDTR2_T_RP_0_e,      16 )
DECLARE_ENUM_VAL( DDR34LMC_SDTR2_T_RP_0_i,      IBM_BIT_INDEX(32, DDR34LMC_SDTR2_T_RP_0_e) )
DECLARE_ENUM_VAL( DDR34LMC_SDTR2_T_RP_0_n,      1 )
DECLARE_ENUM_VAL( DDR34LMC_SDTR2_T_RCD_0_e,     17 )
DECLARE_ENUM_VAL( DDR34LMC_SDTR2_T_RCD_0_i,     IBM_BIT_INDEX(32, DDR34LMC_SDTR2_T_RCD_0_e) )
DECLARE_ENUM_VAL( DDR34LMC_SDTR2_T_RCD_0_n,     1 )
DECLARE_ENUM_VAL( DDR34LMC_SDTR2_T_RC_e,        23 )                                            // Activate to activate/autorefresh time (tRC, minimum) (in DDR clock cycles)
DECLARE_ENUM_VAL( DDR34LMC_SDTR2_T_RC_i,        IBM_BIT_INDEX(32, DDR34LMC_SDTR2_T_RC_e) )
DECLARE_ENUM_VAL( DDR34LMC_SDTR2_T_RC_n,        6 )
DECLARE_ENUM_VAL( DDR34LMC_SDTR2_T_RAS_e,       31 )                                            // Activate to precharge time (tRAS, minimum) (in DDR clock cycles)
DECLARE_ENUM_VAL( DDR34LMC_SDTR2_T_RAS_i,       IBM_BIT_INDEX(32, DDR34LMC_SDTR2_T_RAS_e) )
DECLARE_ENUM_VAL( DDR34LMC_SDTR2_T_RAS_n,       6 )
END_ENUM( DDR34LMC_SDTR2_FIELD )


BEGIN_ENUM( DDR34LMC_SDTR3_FIELD )
//IBM_REG32_FIELD( DDR34LMC_SDTR3_T_WTR_S,    0,  4 ),    // Delay from start of internal write transaction to internal read command to different bank group (for DDR4 only) (in DDR clock cycles)
DECLARE_ENUM_VAL( DDR34LMC_SDTR3_T_WTR_e,       7 ) // Delay from start of internal write transaction to internal read command (in DDR clock cycles)
DECLARE_ENUM_VAL( DDR34LMC_SDTR3_T_WTR_i,       IBM_BIT_INDEX(32, DDR34LMC_SDTR3_T_WTR_e) )
DECLARE_ENUM_VAL( DDR34LMC_SDTR3_T_WTR_n,       4 )
DECLARE_ENUM_VAL( DDR34LMC_SDTR3_T_FAWADJ_e,    11 ) // FAW window adjust variable (in DDR clock cycles)
DECLARE_ENUM_VAL( DDR34LMC_SDTR3_T_FAWADJ_i,    IBM_BIT_INDEX(32, DDR34LMC_SDTR3_T_FAWADJ_e) )
DECLARE_ENUM_VAL( DDR34LMC_SDTR3_T_FAWADJ_n,    2 )
DECLARE_ENUM_VAL( DDR34LMC_SDTR3_T_RTP_e,       15 ) // Internal read command to precharge delay (tRTP minimum) (in DDR clock cycles)
DECLARE_ENUM_VAL( DDR34LMC_SDTR3_T_RTP_i,       IBM_BIT_INDEX(32, DDR34LMC_SDTR3_T_RTP_e) )
DECLARE_ENUM_VAL( DDR34LMC_SDTR3_T_RTP_n,       4 )
//IBM_REG32_FIELD( DDR34LMC_SDTR3_T_RRD_L,  16, 4 ),    Activate to activate delay to same bank group (same rank, tRRD_L, minimum) (for DDR4 only) (in DDR clock cycles)
DECLARE_ENUM_VAL( DDR34LMC_SDTR3_T_RRD_e,       23 ) // Activate to activate delay to different bank group (same rank, tRRD_S, minimum) (in DDR clock cycles)
DECLARE_ENUM_VAL( DDR34LMC_SDTR3_T_RRD_i,       IBM_BIT_INDEX(32, DDR34LMC_SDTR3_T_RRD_e) )
DECLARE_ENUM_VAL( DDR34LMC_SDTR3_T_RRD_n,       4 )
DECLARE_ENUM_VAL( DDR34LMC_SDTR3_T_XSDLL_e,     31 ) // Exit self-refresh and DLL lock delay (tXSDLL) (in I_MC_CLOCK cycles)
DECLARE_ENUM_VAL( DDR34LMC_SDTR3_T_XSDLL_i,     IBM_BIT_INDEX(32, DDR34LMC_SDTR3_T_XSDLL_e) )
DECLARE_ENUM_VAL( DDR34LMC_SDTR3_T_XSDLL_n,     8 )
END_ENUM( DDR34LMC_SDTR3_FIELD )


BEGIN_ENUM( DDR34LMC_SDTR4_FIELD )
DECLARE_ENUM_VAL( DDR34LMC_SDTR4_T_RDDATA_EN_e, 7 )                                                 // PHY read data enable delay (in DDR clock cycles)
DECLARE_ENUM_VAL( DDR34LMC_SDTR4_T_RDDATA_EN_i, IBM_BIT_INDEX(32, DDR34LMC_SDTR4_T_RDDATA_EN_e) )
DECLARE_ENUM_VAL( DDR34LMC_SDTR4_T_RDDATA_EN_n, 7 )
DECLARE_ENUM_VAL( DDR34LMC_SDTR4_T_SYS_RDLAT_e, 15 )                                                // System read latency (in DDR clock cycles)
DECLARE_ENUM_VAL( DDR34LMC_SDTR4_T_SYS_RDLAT_i, IBM_BIT_INDEX(32, DDR34LMC_SDTR4_T_SYS_RDLAT_e) )
DECLARE_ENUM_VAL( DDR34LMC_SDTR4_T_SYS_RDLAT_n, 6 )
//IBM_REG32_FIELD( DDR34LMC_SDTR4_T_CCD_L,      16, 4 ),    CAS to CAS command delay to same bank group (tCCD_L, min). (For DDR4 only). (In DDR clock cycles)
DECLARE_ENUM_VAL( DDR34LMC_SDTR4_T_CCD_e,       23 )                                                // CAS to CAS command delay to different bank group (tCCD_s, minimum.) (In DDR clock cycles)
DECLARE_ENUM_VAL( DDR34LMC_SDTR4_T_CCD_i,       IBM_BIT_INDEX(32, DDR34LMC_SDTR4_T_CCD_e) )
DECLARE_ENUM_VAL( DDR34LMC_SDTR4_T_CCD_n,       3 )
DECLARE_ENUM_VAL( DDR34LMC_SDTR4_T_CPDED_e,     26 )                                                // Command pass disable delay (in DDR clock cycles): 0x0 - one cycle (default: minimum value for DDR3 operation)
DECLARE_ENUM_VAL( DDR34LMC_SDTR4_T_CPDED_i,     IBM_BIT_INDEX(32, DDR34LMC_SDTR4_T_CPDED_e) )
DECLARE_ENUM_VAL( DDR34LMC_SDTR4_T_CPDED_n,     3 )
DECLARE_ENUM_VAL( DDR34LMC_SDTR4_T_MOD_e,       31 )                                                // Mode register set command update delay (tMOD, minimum) (in DDR clock cycles)
DECLARE_ENUM_VAL( DDR34LMC_SDTR4_T_MOD_i,       IBM_BIT_INDEX(32, DDR34LMC_SDTR4_T_MOD_e) )
DECLARE_ENUM_VAL( DDR34LMC_SDTR4_T_MOD_n,       5 )
END_ENUM( DDR34LMC_SDTR4_FIELD )

BEGIN_ENUM( DDR34LMC_SDTR5_FIELD )
DECLARE_ENUM_VAL( DDR34LMC_SDTR5_T_PHY_WRDATA_e,    7 )                                                 // PHY write data latency (See the DFI-3.1 specification.) (In I_MC_CLOCK cycles)
DECLARE_ENUM_VAL( DDR34LMC_SDTR5_T_PHY_WRDATA_i,    IBM_BIT_INDEX(32, DDR34LMC_SDTR5_T_PHY_WRDATA_e) )
DECLARE_ENUM_VAL( DDR34LMC_SDTR5_T_PHY_WRDATA_n,    3 )
END_ENUM( DDR34LMC_SDTR5_FIELD )


BEGIN_ENUM( DDR34LMC_DBG0_FIELD )
DECLARE_ENUM_VAL( DDR34LMC_DBG0_T_SYS_RDLAT_DBG_e,  15 )
DECLARE_ENUM_VAL( DDR34LMC_DBG0_T_SYS_RDLAT_DBG_i,  IBM_BIT_INDEX(32, DDR34LMC_DBG0_T_SYS_RDLAT_DBG_e) )
DECLARE_ENUM_VAL( DDR34LMC_DBG0_T_SYS_RDLAT_DBG_n,  6 )
END_ENUM( DDR34LMC_DBG0_FIELD )


BEGIN_ENUM( DDR34LMC_SMR0_FIELD )
// IBM_REG32_FIELD( DDR34LMC_SMR0_RFU,  16, 3 ),    Reserved, must be programmed to zero
DECLARE_ENUM_VAL( DDR34LMC_SMR0_PPD_e,      19 )                                        // PPD - Precharge power down (not used by the core)
DECLARE_ENUM_VAL( DDR34LMC_SMR0_PPD_i,      IBM_BIT_INDEX(32, DDR34LMC_SMR0_PPD_e) )
DECLARE_ENUM_VAL( DDR34LMC_SMR0_PPD_n,      1 )
DECLARE_ENUM_VAL( DDR34LMC_SMR0_WR_e,       22 )                                        // Write recovery (used by the core)
DECLARE_ENUM_VAL( DDR34LMC_SMR0_WR_i,       IBM_BIT_INDEX(32, DDR34LMC_SMR0_WR_e) )
DECLARE_ENUM_VAL( DDR34LMC_SMR0_WR_n,       3 )
DECLARE_ENUM_VAL( DDR34LMC_SMR0_DLL_e,      23 )                                        // DLL reset (not used by the core)
DECLARE_ENUM_VAL( DDR34LMC_SMR0_DLL_i,      IBM_BIT_INDEX(32, DDR34LMC_SMR0_DLL_e) )
DECLARE_ENUM_VAL( DDR34LMC_SMR0_DLL_n,      1 )
DECLARE_ENUM_VAL( DDR34LMC_SMR0_TM_e,       24 )                                        // TM (not used by the core)
DECLARE_ENUM_VAL( DDR34LMC_SMR0_TM_i,       IBM_BIT_INDEX(32, DDR34LMC_SMR0_TM_e) )
DECLARE_ENUM_VAL( DDR34LMC_SMR0_TM_n,       1 )
DECLARE_ENUM_VAL( DDR34LMC_SMR0_CL_3_1_e,   27 )                                        // CAS latency (Used by the core)
DECLARE_ENUM_VAL( DDR34LMC_SMR0_CL_3_1_i,   IBM_BIT_INDEX(32, DDR34LMC_SMR0_CL_3_1_e) )
DECLARE_ENUM_VAL( DDR34LMC_SMR0_CL_3_1_n,   3 )
DECLARE_ENUM_VAL( DDR34LMC_SMR0_RBT_e,      28 )                                        // Read burst type
DECLARE_ENUM_VAL( DDR34LMC_SMR0_RBT_i,      IBM_BIT_INDEX(32, DDR34LMC_SMR0_RBT_e) )
DECLARE_ENUM_VAL( DDR34LMC_SMR0_RBT_n,      1 )
DECLARE_ENUM_VAL( DDR34LMC_SMR0_CL_0_e,     29 )
DECLARE_ENUM_VAL( DDR34LMC_SMR0_CL_0_i,     IBM_BIT_INDEX(32, DDR34LMC_SMR0_CL_0_e) )
DECLARE_ENUM_VAL( DDR34LMC_SMR0_CL_0_n,     1 )
DECLARE_ENUM_VAL( DDR34LMC_SMR0_BL_e,       31 )                                        // Burst length (used by the core)
DECLARE_ENUM_VAL( DDR34LMC_SMR0_BL_i,       IBM_BIT_INDEX(32, DDR34LMC_SMR0_BL_e) )
DECLARE_ENUM_VAL( DDR34LMC_SMR0_BL_n,       2 )
END_ENUM( DDR34LMC_SMR0_FIELD )

BEGIN_ENUM( DDR34LMC_PPD )
DECLARE_ENUM_VAL( DDR34LMC_PPD_Slow_exit,   0b0 )  // DLL off
DECLARE_ENUM_VAL( DDR34LMC_PPD_Fast_exit,   0b1 )  // DLL on
END_ENUM( DDR34LMC_PPD )

BEGIN_ENUM( DDR34LMC_WR )
DECLARE_ENUM_VAL( DDR34LMC_WR_16_cycles,    0b000 )
DECLARE_ENUM_VAL( DDR34LMC_WR_5_cycles,     0b001 )
DECLARE_ENUM_VAL( DDR34LMC_WR_6_cycles,     0b010 )
DECLARE_ENUM_VAL( DDR34LMC_WR_7_cycles,     0b011 )
DECLARE_ENUM_VAL( DDR34LMC_WR_8_cycles,     0b100 )
DECLARE_ENUM_VAL( DDR34LMC_WR_10_cycles,    0b101 )
DECLARE_ENUM_VAL( DDR34LMC_WR_12_cycles,    0b110 )
DECLARE_ENUM_VAL( DDR34LMC_WR_14_cycles,    0b111 )
END_ENUM( DDR34LMC_WR )

BEGIN_ENUM( DDR34LMC_RBT )
DECLARE_ENUM_VAL( DDR34LMC_RBT_Sequential,  0b0 )
//DDR34LMC_RBT_Reserved   = 0b1, Reserved (interleaved mode is not supported by the core)
END_ENUM( DDR34LMC_RBT )

BEGIN_ENUM( DDR34LMC_BL )
DECLARE_ENUM_VAL( DDR34LMC_BL_8,    0b00 ) // BL8 (fixed)
DECLARE_ENUM_VAL( DDR34LMC_BL_8_4,  0b01 ) // BC4/BL8 on-the-fly (optimizes performance by allowing the core to switch between four beat and eight beat transfers without requiring an MRS command to be issued, only available for DRAM data width of Half mode and Quarter mode)
DECLARE_ENUM_VAL( DDR34LMC_BL_4,    0b10 ) // BC4 (fixed) (only available for DRAM data width of Half mode and Quarter mode)
END_ENUM( DDR34LMC_BL )


BEGIN_ENUM( DDR34LMC_SMR1_FIELD )
DECLARE_ENUM_VAL( DDR34LMC_SMR1_QOFF_e,         19 )                                            // Q-Off, Output buffer disabled (not used by the core)
DECLARE_ENUM_VAL( DDR34LMC_SMR1_QOFF_i,         IBM_BIT_INDEX(32, DDR34LMC_SMR1_QOFF_e) )
DECLARE_ENUM_VAL( DDR34LMC_SMR1_QOFF_n,         1 )
DECLARE_ENUM_VAL( DDR34LMC_SMR1_TDQS_e,         20 )                                            // TDQS control enable (not used by the core)
DECLARE_ENUM_VAL( DDR34LMC_SMR1_TDQS_i,         IBM_BIT_INDEX(32, DDR34LMC_SMR1_TDQS_e) )
DECLARE_ENUM_VAL( DDR34LMC_SMR1_TDQS_n,         1 )
// IBM_REG32_FIELD( DDR34LMC_SMR1_RFU,      21, 1 ),    Reserved, must be programmed to zero
DECLARE_ENUM_VAL( DDR34LMC_SMR1_RTT_Nom_2_e,    22 )                                            // Memory device signal termination control (not used by the core)
DECLARE_ENUM_VAL( DDR34LMC_SMR1_RTT_Nom_2_i,    IBM_BIT_INDEX(32, DDR34LMC_SMR1_RTT_Nom_2_e) )
DECLARE_ENUM_VAL( DDR34LMC_SMR1_RTT_Nom_2_n,    1 )
// IBM_REG32_FIELD( DDR34LMC_SMR1_RFU,      23, 1 ),    Reserved, must be programmed to zero
DECLARE_ENUM_VAL( DDR34LMC_SMR1_WR_Level_e,     24 )                                            // Write leveling control enable (not used by the core)
DECLARE_ENUM_VAL( DDR34LMC_SMR1_WR_Level_i,     IBM_BIT_INDEX(32, DDR34LMC_SMR1_WR_Level_e) )
DECLARE_ENUM_VAL( DDR34LMC_SMR1_WR_Level_n,     1 )
DECLARE_ENUM_VAL( DDR34LMC_SMR1_RTT_Nom_1_e,    25 )
DECLARE_ENUM_VAL( DDR34LMC_SMR1_RTT_Nom_1_i,    IBM_BIT_INDEX(32, DDR34LMC_SMR1_RTT_Nom_1_e) )
DECLARE_ENUM_VAL( DDR34LMC_SMR1_RTT_Nom_1_n,    1 )
DECLARE_ENUM_VAL( DDR34LMC_SMR1_DIC_1_e,        26 )                                            // Driver Impedance Control
DECLARE_ENUM_VAL( DDR34LMC_SMR1_DIC_1_i,        IBM_BIT_INDEX(32, DDR34LMC_SMR1_DIC_1_e) )
DECLARE_ENUM_VAL( DDR34LMC_SMR1_DIC_1_n,        1 )
DECLARE_ENUM_VAL( DDR34LMC_SMR1_AL_e,           28 )                                            // Additive latency in cycles (used by the core)
DECLARE_ENUM_VAL( DDR34LMC_SMR1_AL_i,           IBM_BIT_INDEX(32, DDR34LMC_SMR1_AL_e) )
DECLARE_ENUM_VAL( DDR34LMC_SMR1_AL_n,           2 )
DECLARE_ENUM_VAL( DDR34LMC_SMR1_RTT_Nom_0_e,    29 )
DECLARE_ENUM_VAL( DDR34LMC_SMR1_RTT_Nom_0_i,    IBM_BIT_INDEX(32, DDR34LMC_SMR1_RTT_Nom_0_e) )
DECLARE_ENUM_VAL( DDR34LMC_SMR1_RTT_Nom_0_n,    1 )
DECLARE_ENUM_VAL( DDR34LMC_SMR1_DIC_0_e,        30 )
DECLARE_ENUM_VAL( DDR34LMC_SMR1_DIC_0_i,        IBM_BIT_INDEX(32, DDR34LMC_SMR1_DIC_0_e) )
DECLARE_ENUM_VAL( DDR34LMC_SMR1_DIC_0_n,        1 )
DECLARE_ENUM_VAL( DDR34LMC_SMR1_DLL_e,          31 )                                            // DLL enable (not used by the core)
DECLARE_ENUM_VAL( DDR34LMC_SMR1_DLL_i,          IBM_BIT_INDEX(32, DDR34LMC_SMR1_DLL_e) )
DECLARE_ENUM_VAL( DDR34LMC_SMR1_DLL_n,          1 )
END_ENUM( DDR34LMC_SMR1_FIELD )

BEGIN_ENUM( DDR34LMC_AL )
DECLARE_ENUM_VAL( DDR34LMC_AL_disabled, 0b00 )
DECLARE_ENUM_VAL( DDR34LMC_AL_CL_1,     0b01 )
DECLARE_ENUM_VAL( DDR34LMC_AL_CL_2,     0b10 )
END_ENUM( DDR34LMC_AL )

BEGIN_ENUM( DDR34LMC_RTT_Nom )
DECLARE_ENUM_VAL( DDR34LMC_RTT_Nom_Disabled,    0b000 )
DECLARE_ENUM_VAL( DDR34LMC_RTT_Nom_4_ohm,       0b001 )    // RZQ/4 ohm
DECLARE_ENUM_VAL( DDR34LMC_RTT_Nom_2_ohm,       0b010 )    // RZQ/2 ohm
DECLARE_ENUM_VAL( DDR34LMC_RTT_Nom_6_ohm,       0b011 )    // RZQ/6 ohm
DECLARE_ENUM_VAL( DDR34LMC_RTT_Nom_12_ohm,      0b100 )    // RZQ/12 ohm
DECLARE_ENUM_VAL( DDR34LMC_RTT_Nom_8_ohm,       0b101 )    // RZQ/8 ohm
END_ENUM( DDR34LMC_RTT_Nom )

BEGIN_ENUM( DDR34LMC_DIC )
DECLARE_ENUM_VAL( DDR34LMC_DIC_6,       0b00 ) // RZQ/6
DECLARE_ENUM_VAL( DDR34LMC_DIC_7,       0b01 ) // RZQ/7
DECLARE_ENUM_VAL( DDR34LMC_DIC_TBD0,    0b10 ) // RZQ/TBD
DECLARE_ENUM_VAL( DDR34LMC_DIC_TBD1,    0b11 ) // RZQ/TBD
END_ENUM( DDR34LMC_DIC )


BEGIN_ENUM( DDR34LMC_SMR2_FIELD )
// IBM_REG32_FIELD( DDR34LMC_SMR2_RFU,  19, 1 ),    Reserved, must be programmed to zero
// IBM_REG32_FIELD( DDR34LMC_SMR2_RFU,  20, 1 ),    Reserved, must be programmed to zero
DECLARE_ENUM_VAL( DDR34LMC_SMR2_RTT_WR_e,   22 )                                        // Rtt for write operations (not used by the core)
DECLARE_ENUM_VAL( DDR34LMC_SMR2_RTT_WR_i,   IBM_BIT_INDEX(32, DDR34LMC_SMR2_RTT_WR_e) )
DECLARE_ENUM_VAL( DDR34LMC_SMR2_RTT_WR_n,   2 )
// IBM_REG32_FIELD( DDR34LMC_SMR2_RFU,  23, 1 ),    Reserved, must be programmed to zero
DECLARE_ENUM_VAL( DDR34LMC_SMR2_SRT_e,      24 )                                        // Self-refresh temperature range (Not used by the core)
DECLARE_ENUM_VAL( DDR34LMC_SMR2_SRT_i,      IBM_BIT_INDEX(32, DDR34LMC_SMR2_SRT_e) )
DECLARE_ENUM_VAL( DDR34LMC_SMR2_SRT_n,      1 )
DECLARE_ENUM_VAL( DDR34LMC_SMR2_ASR_e,      25 )                                        // Auto self refresh enable (ASR; not used by the core)
DECLARE_ENUM_VAL( DDR34LMC_SMR2_ASR_i,      IBM_BIT_INDEX(32, DDR34LMC_SMR2_ASR_e) )
DECLARE_ENUM_VAL( DDR34LMC_SMR2_ASR_n,      1 )
DECLARE_ENUM_VAL( DDR34LMC_SMR2_CWL_e,      28 )                                        // CAS write latency (only used by the core in DDR3 mode)
DECLARE_ENUM_VAL( DDR34LMC_SMR2_CWL_i,      IBM_BIT_INDEX(32, DDR34LMC_SMR2_CWL_e) )
DECLARE_ENUM_VAL( DDR34LMC_SMR2_CWL_n,      1 )
DECLARE_ENUM_VAL( DDR34LMC_SMR2_PASR_e,     31 )                                        // Partial array self-refresh (optional) (not used by the core). See the JEDEC DDR3 standard for details.
DECLARE_ENUM_VAL( DDR34LMC_SMR2_PASR_i,     IBM_BIT_INDEX(32, DDR34LMC_SMR2_PASR_e) )
DECLARE_ENUM_VAL( DDR34LMC_SMR2_PASR_n,     3 )
END_ENUM( DDR34LMC_SMR2_FIELD )

BEGIN_ENUM( DDR34LMC_RTT_WR )
DECLARE_ENUM_VAL( DDR34LMC_RTT_WR_Dyn_ODT_off,  0b00 ) // Dynamic ODT off (write does not affect Rtt value)
DECLARE_ENUM_VAL( DDR34LMC_RTT_WR_4,            0b01 ) // RZQ/4
DECLARE_ENUM_VAL( DDR34LMC_RTT_WR_2,            0b10 ) // RZQ/2
END_ENUM( DDR34LMC_RTT_WR )

BEGIN_ENUM( DDR34LMC_SRT )
DECLARE_ENUM_VAL( DDR34LMC_SRT_Normal,      0b0 )
DECLARE_ENUM_VAL( DDR34LMC_SRT_Extended,    0b1 )
END_ENUM( DDR34LMC_SRT )



BEGIN_ENUM( DDR34LMC_SMR3_FIELD )
// IBM_REG32_FIELD( DDR34LMC_SMR3_RFU,  19, 2 ),    Reserved, must be programmed to zero (For DDR4 only)
// IBM_REG32_FIELD( DDR34LMC_SMR3_RFU,  21, 2 ),    Reserved, must be programmed to zero (For DDR4 only)
// IBM_REG32_FIELD( DDR34LMC_SMR3_RFU,  23, 3 ),    Reserved, must be programmed to zero (For DDR4 only)
// IBM_REG32_FIELD( DDR34LMC_SMR3_RFU,  26, 1 ),    Reserved, must be programmed to zero (For DDR4 only)
// IBM_REG32_FIELD( DDR34LMC_SMR3_RFU,  27, 1 ),    Reserved, must be programmed to zero (For DDR4 only)
// IBM_REG32_FIELD( DDR34LMC_SMR3_RFU,  28, 1 ),    Reserved, must be programmed to zero (For DDR4 only)
DECLARE_ENUM_VAL( DDR34LMC_SMR3_MPR_e,      29 ) // MPR operation (not used by the core)
DECLARE_ENUM_VAL( DDR34LMC_SMR3_MPR_i,      IBM_BIT_INDEX(32, DDR34LMC_SMR3_MPR_e) )
DECLARE_ENUM_VAL( DDR34LMC_SMR3_MPR_n,      1 )
DECLARE_ENUM_VAL( DDR34LMC_SMR3_MPR_SEL_e,  31 ) // MPR selection (not used by the core)
DECLARE_ENUM_VAL( DDR34LMC_SMR3_MPR_SEL_i,  IBM_BIT_INDEX(32, DDR34LMC_SMR3_MPR_SEL_e) )
DECLARE_ENUM_VAL( DDR34LMC_SMR3_MPR_SEL_n,  2 )
END_ENUM( DDR34LMC_SMR3_FIELD )

BEGIN_ENUM( DDR34LMC_MPR )
DECLARE_ENUM_VAL( DDR34LMC_MPR_Normal_Operation,    0b0 )
DECLARE_ENUM_VAL( DDR34LMC_MPR_from_MPR,            0b1 )  // Data flow from MPR
END_ENUM( DDR34LMC_MPR )

BEGIN_ENUM( DDR34LMC_MPR_SEL )
DECLARE_ENUM_VAL( DDR34LMC_MPR_SEL_Predefined_pattern, 0b00 )
END_ENUM( DDR34LMC_MPR_SEL )


#ifdef DDR34LMC_USE_DDR4
BEGIN_ENUM( DDR34LMC_SMR4_FIELD )
DECLARE_ENUM_VAL( DDR34LMC_SMR4_WR_PRE_e,       19 ) // Write preamble (not used by the core)
DECLARE_ENUM_VAL( DDR34LMC_SMR4_WR_PRE_i,       IBM_BIT_INDEX(32, DDR34LMC_SMR4_WR_PRE_e) )
DECLARE_ENUM_VAL( DDR34LMC_SMR4_WR_PRE_n,       1 )
DECLARE_ENUM_VAL( DDR34LMC_SMR4_RD_PRE_e,       20 ) // Read preamble (not used by the core)
DECLARE_ENUM_VAL( DDR34LMC_SMR4_RD_PRE_i,       IBM_BIT_INDEX(32, DDR34LMC_SMR4_RD_PRE_e) )
DECLARE_ENUM_VAL( DDR34LMC_SMR4_RD_PRE_n,       1 )
DECLARE_ENUM_VAL( DDR34LMC_SMR4_RPT_MODE_e,     21 ) // Read preamble training mode (not used by the core)
DECLARE_ENUM_VAL( DDR34LMC_SMR4_RPT_MODE_i,     IBM_BIT_INDEX(32, DDR34LMC_SMR4_RPT_MODE_e) )
DECLARE_ENUM_VAL( DDR34LMC_SMR4_RPT_MODE_n,     1 )
DECLARE_ENUM_VAL( DDR34LMC_SMR4_FESR_MODE_e,    22 ) // Fast exit self-refresh mode (not used by the core)
DECLARE_ENUM_VAL( DDR34LMC_SMR4_FESR_MODE_i,    IBM_BIT_INDEX(32, DDR34LMC_SMR4_FESR_MODE_e) )
DECLARE_ENUM_VAL( DDR34LMC_SMR4_FESR_MODE_n,    1 )
DECLARE_ENUM_VAL( DDR34LMC_SMR4_CS_LAT_MODE_e,  25 ) // CS to CMD/ADDR latency mode (cycles) (not used by the core)
DECLARE_ENUM_VAL( DDR34LMC_SMR4_CS_LAT_MODE_i,  IBM_BIT_INDEX(32, DDR34LMC_SMR4_CS_LAT_MODE_e) )
DECLARE_ENUM_VAL( DDR34LMC_SMR4_CS_LAT_MODE_n,  3 )
DECLARE_ENUM_VAL( DDR34LMC_SMR4_ALERT_STAT_e,   26 ) // C/A parity alert status (not used by the core)
DECLARE_ENUM_VAL( DDR34LMC_SMR4_ALERT_STAT_i,   IBM_BIT_INDEX(32, DDR34LMC_SMR4_ALERT_STAT_e) )
DECLARE_ENUM_VAL( DDR34LMC_SMR4_ALERT_STAT_n,   1 )
DECLARE_ENUM_VAL( DDR34LMC_SMR4_IVM_MODE_e,     27 ) // Internal Vref monitor (not used by the core)
DECLARE_ENUM_VAL( DDR34LMC_SMR4_IVM_MODE_i,     IBM_BIT_INDEX(32, DDR34LMC_SMR4_IVM_MODE_e) )
DECLARE_ENUM_VAL( DDR34LMC_SMR4_IVM_MODE_n,     1 )
DECLARE_ENUM_VAL( DDR34LMC_SMR4_TCR_MODE_e,     28 ) // Temperature controlled refresh mode (not used by the core)
DECLARE_ENUM_VAL( DDR34LMC_SMR4_TCR_MODE_i,     IBM_BIT_INDEX(32, DDR34LMC_SMR4_TCR_MODE_e) )
DECLARE_ENUM_VAL( DDR34LMC_SMR4_TCR_MODE_n,     1 )
DECLARE_ENUM_VAL( DDR34LMC_SMR4_TCR_RANGE_e,    29 ) // Temperature controlled refresh range (not used by the core)
DECLARE_ENUM_VAL( DDR34LMC_SMR4_TCR_RANGE_i,    IBM_BIT_INDEX(32, DDR34LMC_SMR4_TCR_RANGE_e) )
DECLARE_ENUM_VAL( DDR34LMC_SMR4_TCR_RANGE_n,    1 )
DECLARE_ENUM_VAL( DDR34LMC_SMR4_MPD_MODE_e,     30 ) // Maximum power down mode (not used by the core)
DECLARE_ENUM_VAL( DDR34LMC_SMR4_MPD_MODE_i,     IBM_BIT_INDEX(32, DDR34LMC_SMR4_MPD_MODE_e) )
DECLARE_ENUM_VAL( DDR34LMC_SMR4_MPD_MODE_n,     1 )
END_ENUM( DDR34LMC_SMR4_FIELD )


BEGIN_ENUM( DDR34LMC_SMR5_FIELD )
DECLARE_ENUM_VAL( DDR34LMC_SMR5_RD_DBI_e,       20 ) // Read DBI enable (not used by the core)
DECLARE_ENUM_VAL( DDR34LMC_SMR5_RD_DBI_i,       IBM_BIT_INDEX(32, DDR34LMC_SMR5_RD_DBI_e) )
DECLARE_ENUM_VAL( DDR34LMC_SMR5_RD_DBI_n,       1 )
DECLARE_ENUM_VAL( DDR34LMC_SMR5_WR_DBI_e,       21 ) // Write DBI enable (not used by the core)
DECLARE_ENUM_VAL( DDR34LMC_SMR5_WR_DBI_i,       IBM_BIT_INDEX(32, DDR34LMC_SMR5_WR_DBI_e) )
DECLARE_ENUM_VAL( DDR34LMC_SMR5_WR_DBI_n,       1 )
DECLARE_ENUM_VAL( DDR34LMC_SMR5_DM_MODE_e,      22 ) // Data mask mode enable (not used by the core)
DECLARE_ENUM_VAL( DDR34LMC_SMR5_DM_MODE_i,      IBM_BIT_INDEX(32, DDR34LMC_SMR5_DM_MODE_e) )
DECLARE_ENUM_VAL( DDR34LMC_SMR5_DM_MODE_n,      1 )
DECLARE_ENUM_VAL( DDR34LMC_SMR5_RTT_PARK_e,     25 ) // RTT_PARK (not used by the core)
DECLARE_ENUM_VAL( DDR34LMC_SMR5_RTT_PARK_i,     IBM_BIT_INDEX(32, DDR34LMC_SMR5_RTT_PARK_e) )
DECLARE_ENUM_VAL( DDR34LMC_SMR5_RTT_PARK_n,     3 )
// IBM_REG32_FIELD( DDR34LMC_SMR5_RFU,          26, 1 ),    Reserved, must be programmed to zero
DECLARE_ENUM_VAL( DDR34LMC_SMR5_PAR_ERR_STAT_e, 27 ) // C/A parity error status (not used by the core)
DECLARE_ENUM_VAL( DDR34LMC_SMR5_PAR_ERR_STAT_i, IBM_BIT_INDEX(32, DDR34LMC_SMR5_PAR_ERR_STAT_e) )
DECLARE_ENUM_VAL( DDR34LMC_SMR5_PAR_ERR_STAT_n, 1 )
DECLARE_ENUM_VAL( DDR34LMC_SMR5_CRC_CLEAR_e,    28 ) // CRC error clear enable (not used by the core)
DECLARE_ENUM_VAL( DDR34LMC_SMR5_CRC_CLEAR_i,    IBM_BIT_INDEX(32, DDR34LMC_SMR5_CRC_CLEAR_e) )
DECLARE_ENUM_VAL( DDR34LMC_SMR5_CRC_CLEAR_n,    1 )
DECLARE_ENUM_VAL( DDR34LMC_SMR5_PAR_LAT_MODE_e, 31 ) // C/A parity latency mode (not used by the core)
DECLARE_ENUM_VAL( DDR34LMC_SMR5_PAR_LAT_MODE_i, IBM_BIT_INDEX(32, DDR34LMC_SMR5_PAR_LAT_MODE_e) )
DECLARE_ENUM_VAL( DDR34LMC_SMR5_PAR_LAT_MODE_n, 3 )
END_ENUM( DDR34LMC_SMR5_FIELD )

BEGIN_ENUM( DDR34LMC_RTT_PARK )
DECLARE_ENUM_VAL( DDR34LMC_RTT_PARK_Rtt_Nom1_Disable,   0b000 )
DECLARE_ENUM_VAL( DDR34LMC_RTT_PARK_4,                  0b001 )    // RZQ/4
DECLARE_ENUM_VAL( DDR34LMC_RTT_PARK_2,                  0b010 )    // RZQ/2
DECLARE_ENUM_VAL( DDR34LMC_RTT_PARK_6,                  0b011 )    // RZQ/6
DECLARE_ENUM_VAL( DDR34LMC_RTT_PARK_1,                  0b100 )    // RZQ/1
DECLARE_ENUM_VAL( DDR34LMC_RTT_PARK_5,                  0b101 )    // RZQ/5
DECLARE_ENUM_VAL( DDR34LMC_RTT_PARK_3,                  0b110 )    // RZQ/3
DECLARE_ENUM_VAL( DDR34LMC_RTT_PARK_7,                  0b111 )    // RZQ/7
END_ENUM( DDR34LMC_RTT_PARK )

BEGIN_ENUM( DDR34LMC_PAR_ERR_STAT )
DECLARE_ENUM_VAL( DDR34LMC_PAR_ERR_STAT_Clear,  0b0 )
DECLARE_ENUM_VAL( DDR34LMC_PAR_ERR_STAT_Error,  0b1 )
END_ENUM( DDR34LMC_PAR_ERR_STAT )

BEGIN_ENUM( DDR34LMC_PAR_LAT_MODE )
DECLARE_ENUM_VAL( DDR34LMC_PAR_LAT_MODE_Disable,    0b000 )
DECLARE_ENUM_VAL( DDR34LMC_PAR_LAT_MODE_4nCK,       0b001 )
DECLARE_ENUM_VAL( DDR34LMC_PAR_LAT_MODE_5nCK,       0b010 )
DECLARE_ENUM_VAL( DDR34LMC_PAR_LAT_MODE_6nCK,       0b011 )
DECLARE_ENUM_VAL( DDR34LMC_PAR_LAT_MODE_8nCK,       0b100 )
END_ENUM( DDR34LMC_PAR_LAT_MODE )


BEGIN_ENUM( DDR34LMC_SMR6_FIELD )
DECLARE_ENUM_VAL( DDR34LMC_SMR6_tCCD_L_e,           21 ) // tCCD_L: (not used by the core)
DECLARE_ENUM_VAL( DDR34LMC_SMR6_tCCD_L_i,           IBM_BIT_INDEX(32, DDR34LMC_SMR6_tCCD_L_e) )
DECLARE_ENUM_VAL( DDR34LMC_SMR6_tCCD_L_n,           3 )
// IBM_REG32_FIELD( DDR34LMC_SMR6_RFU,          22, 2 ),    Reserved, must be programmed to zero
DECLARE_ENUM_VAL( DDR34LMC_SMR6_Vref_DQ_EN_e,       24 ) // VrefDQ training enable (not used by the core)
DECLARE_ENUM_VAL( DDR34LMC_SMR6_Vref_DQ_EN_i,       IBM_BIT_INDEX(32, DDR34LMC_SMR6_Vref_DQ_EN_e) )
DECLARE_ENUM_VAL( DDR34LMC_SMR6_Vref_DQ_EN_n,       1 )
DECLARE_ENUM_VAL( DDR34LMC_SMR6_Vref_DQ_RANGE_e,    25 ) // VrefDQ training range (not used by the core)
DECLARE_ENUM_VAL( DDR34LMC_SMR6_Vref_DQ_RANGE_i,    IBM_BIT_INDEX(32, DDR34LMC_SMR6_Vref_DQ_RANGE_e) )
DECLARE_ENUM_VAL( DDR34LMC_SMR6_Vref_DQ_RANGE_n,    1 )
DECLARE_ENUM_VAL( DDR34LMC_SMR6_Vref_DQ_VALUE_e,    31 ) // VrefDQ training value (not used by the core). See the JEDEC DDR4 standard for details.
DECLARE_ENUM_VAL( DDR34LMC_SMR6_Vref_DQ_VALUE_i,    IBM_BIT_INDEX(32, DDR34LMC_SMR6_Vref_DQ_VALUE_e) )
DECLARE_ENUM_VAL( DDR34LMC_SMR6_Vref_DQ_VALUE_n,    6 )
END_ENUM( DDR34LMC_SMR6_FIELD )

BEGIN_ENUM( DDR34LMC_Vref_DQ_RANGE )
DECLARE_ENUM_VAL( DDR34LMC_Vref_DQ_RANGE_1, 0b0 )
DECLARE_ENUM_VAL( DDR34LMC_Vref_DQ_RANGE_2, 0b1 )
END_ENUM( DDR34LMC_Vref_DQ_RANGE )
#endif



BEGIN_ENUM( DDR34LMC_SCRUB_CNTL_FIELD )
DECLARE_ENUM_VAL( DDR34LMC_SCRUB_CNTL_SCRUB_MODE_e,     1 )                                                         // SCRUB engine mode
DECLARE_ENUM_VAL( DDR34LMC_SCRUB_CNTL_SCRUB_MODE_i,     IBM_BIT_INDEX(32, DDR34LMC_SCRUB_CNTL_SCRUB_MODE_e) )
DECLARE_ENUM_VAL( DDR34LMC_SCRUB_CNTL_SCRUB_MODE_n,     2 )
DECLARE_ENUM_VAL( DDR34LMC_SCRUB_CNTL_UE_RESP_e,        2 )                                                         // Scrub uncorrectable error (UE) response
DECLARE_ENUM_VAL( DDR34LMC_SCRUB_CNTL_UE_RESP_i,        IBM_BIT_INDEX(32, DDR34LMC_SCRUB_CNTL_UE_RESP_e) )
DECLARE_ENUM_VAL( DDR34LMC_SCRUB_CNTL_UE_RESP_n,        1 )
DECLARE_ENUM_VAL( DDR34LMC_SCRUB_CNTL_CE_RESP_e,        3 )                                                         // Scrub correctable error (CE) response
DECLARE_ENUM_VAL( DDR34LMC_SCRUB_CNTL_CE_RESP_i,        IBM_BIT_INDEX(32, DDR34LMC_SCRUB_CNTL_CE_RESP_e) )
DECLARE_ENUM_VAL( DDR34LMC_SCRUB_CNTL_CE_RESP_n,        1 )
DECLARE_ENUM_VAL( DDR34LMC_SCRUB_CNTL_SCRUB_RANGE_EN_e, 31 )                                                        // Scrub range enable
DECLARE_ENUM_VAL( DDR34LMC_SCRUB_CNTL_SCRUB_RANGE_EN_i, IBM_BIT_INDEX(32, DDR34LMC_SCRUB_CNTL_SCRUB_RANGE_EN_e) )   // When a given bit of this field is set to 1, the corresponding scrub engine start
DECLARE_ENUM_VAL( DDR34LMC_SCRUB_CNTL_SCRUB_RANGE_EN_n, 16 )                                                        // address (SCRUB_ST_<rank><port>) and scrub engine end address
                                                                                                                    // (SCRUB_ED_<rank><port>) register pair are included as part of the range of
                                                                                                                    // memory locations subject to memory scrubbing or prefill.
END_ENUM( DDR34LMC_SCRUB_CNTL_FIELD )

BEGIN_ENUM( DDR34LMC_SCRUB_MODE )
DECLARE_ENUM_VAL( DDR34LMC_SCRUB_MODE_Disable_Scrub,    0b00 ) // Disable Scrub engine
DECLARE_ENUM_VAL( DDR34LMC_SCRUB_MODE_Enable_prefill,   0b01 ) // Enable prefill operation
DECLARE_ENUM_VAL( DDR34LMC_SCRUB_MODE_Enable_scrub,     0b10 ) // Enable scrub operation
END_ENUM( DDR34LMC_SCRUB_MODE )

BEGIN_ENUM( DDR34LMC_UE_RESP )
DECLARE_ENUM_VAL( DDR34LMC_UE_RESP_continue_scrub,  0b0 )  // If UE occurs, continue scrub operations
DECLARE_ENUM_VAL( DDR34LMC_UE_RESP_stop_scrub,      0b1 )  // If UE occurs, stop scrub operations and set SCRUB_MODE to 00
END_ENUM( DDR34LMC_UE_RESP )

BEGIN_ENUM( DDR34LMC_CE_RESP )
DECLARE_ENUM_VAL( DDR34LMC_CE_RESP_continue_scrub,  0b0 )  // If CE occurs, continue scrub operations
DECLARE_ENUM_VAL( DDR34LMC_CE_RESP_stop_scrub,      0b1 )  // If CE occurs, stop scrub operations and set SCRUB_MODE to 00
END_ENUM( DDR34LMC_CE_RESP )


BEGIN_ENUM( DDR34LMC_SCRUB_INT_FIELD )
DECLARE_ENUM_VAL( DDR34LMC_SCRUB_INT_e, 31 )                                        // Scrub refresh interval timer
DECLARE_ENUM_VAL( DDR34LMC_SCRUB_INT_i, IBM_BIT_INDEX(32, DDR34LMC_SCRUB_INT_e) )   // Defines the scrub interval as a multiple of the auto-refresh cycles. For example, a
DECLARE_ENUM_VAL( DDR34LMC_SCRUB_INT_n, 16 )                                        // value of x000F would configure the scrub engine to perform a scrubbing operation
                                                                                    // once every 15 autorefresh intervals (typically 7.8 μs × 15 = 117 μs).
                                                                                    // The minimum supported value while scrub operation is active is 0x0001.
END_ENUM( DDR34LMC_SCRUB_INT_FIELD )


BEGIN_ENUM( DDR34LMC_SCRUB_CUR_FIELD )
DECLARE_ENUM_VAL( DDR34LMC_SCRUB_CUR_RANK_e,    1 )                                             // Current scrub rank
DECLARE_ENUM_VAL( DDR34LMC_SCRUB_CUR_RANK_i,    IBM_BIT_INDEX(32, DDR34LMC_SCRUB_CUR_RANK_e) )
DECLARE_ENUM_VAL( DDR34LMC_SCRUB_CUR_RANK_n,    2 )
DECLARE_ENUM_VAL( DDR34LMC_SCRUB_CUR_ROW_e,     17 )                                             // Current scrub row
DECLARE_ENUM_VAL( DDR34LMC_SCRUB_CUR_ROW_i,     IBM_BIT_INDEX(32, DDR34LMC_SCRUB_CUR_ROW_e) )
DECLARE_ENUM_VAL( DDR34LMC_SCRUB_CUR_ROW_n,     16 )
DECLARE_ENUM_VAL( DDR34LMC_SCRUB_CUR_BANK_e,    20 )                                            // Current scrub bank
DECLARE_ENUM_VAL( DDR34LMC_SCRUB_CUR_BANK_i,    IBM_BIT_INDEX(32, DDR34LMC_SCRUB_CUR_BANK_e) )
DECLARE_ENUM_VAL( DDR34LMC_SCRUB_CUR_BANK_n,    3 )
DECLARE_ENUM_VAL( DDR34LMC_SCRUB_CUR_COL_e,     31 )                                            // Current scrub column
DECLARE_ENUM_VAL( DDR34LMC_SCRUB_CUR_COL_i,     IBM_BIT_INDEX(32, DDR34LMC_SCRUB_CUR_COL_e) )
DECLARE_ENUM_VAL( DDR34LMC_SCRUB_CUR_COL_n,     11 )
END_ENUM( DDR34LMC_SCRUB_CUR_FIELD )


#ifdef DDR34LMC_USE_DDR4
BEGIN_ENUM( DDR34LMC_SCRUB_CUR_EXT_FIELD )
DECLARE_ENUM_VAL( DDR34LMC_SCRUB_CUR_EXT_ROW_e, 30 )                                             // Current scrub row address <MSb> (only for DDR4)
DECLARE_ENUM_VAL( DDR34LMC_SCRUB_CUR_EXT_ROW_i, IBM_BIT_INDEX(32, DDR34LMC_SCRUB_CUR_EXT_ROW_e) )
DECLARE_ENUM_VAL( DDR34LMC_SCRUB_CUR_EXT_ROW_n, 1 )
DECLARE_ENUM_VAL( DDR34LMC_SCRUB_CUR_EXT_BG_e,  31 )                                             // Current scrub BG address <MSb> (only for DDR4)
DECLARE_ENUM_VAL( DDR34LMC_SCRUB_CUR_EXT_BG_i,  IBM_BIT_INDEX(32, DDR34LMC_SCRUB_CUR_EXT_BG_e) )
DECLARE_ENUM_VAL( DDR34LMC_SCRUB_CUR_EXT_BG_n,  1 )
END_ENUM( DDR34LMC_SCRUB_CUR_EXT_FIELD )
#endif


BEGIN_ENUM( DDR34LMC_SCRUB_PREFILL_DATAn_FIELD )
DECLARE_ENUM_VAL( DDR34LMC_SCRUB_PREFILL_DATAn_e,   31 )                                                 // Prefill data definition for scrub engine
DECLARE_ENUM_VAL( DDR34LMC_SCRUB_PREFILL_DATAn_i,   IBM_BIT_INDEX(32, DDR34LMC_SCRUB_PREFILL_DATAn_e) )
DECLARE_ENUM_VAL( DDR34LMC_SCRUB_PREFILL_DATAn_n,   32 )
END_ENUM( DDR34LMC_SCRUB_PREFILL_DATAn_FIELD )


BEGIN_ENUM( DDR34LMC_SCRUB_ST_RANKm_PORTx_FIELD )
//IBM_REG32_FIELD( DDR34LMC_SCRUB_ST_RANKm_PORTx_BG,        0,  1 ),    Start bank group address <MSb> (only for DDR4)
//IBM_REG32_FIELD( DDR34LMC_SCRUB_ST_RANKm_PORTx_ROW_16,    1,  1 ),    // Start scrub row, For DDR3 mode, ROW[16] is unused.
DECLARE_ENUM_VAL( DDR34LMC_SCRUB_ST_RANKm_PORTx_ROW_e,  17 )                                                         // Start scrub row
DECLARE_ENUM_VAL( DDR34LMC_SCRUB_ST_RANKm_PORTx_ROW_i,  IBM_BIT_INDEX(32, DDR34LMC_SCRUB_ST_RANKm_PORTx_ROW_e) )
DECLARE_ENUM_VAL( DDR34LMC_SCRUB_ST_RANKm_PORTx_ROW_n,  16 )
DECLARE_ENUM_VAL( DDR34LMC_SCRUB_ST_RANKm_PORTx_BANK_e, 20 )                                                        // Start scrub bank
DECLARE_ENUM_VAL( DDR34LMC_SCRUB_ST_RANKm_PORTx_BANK_i, IBM_BIT_INDEX(32, DDR34LMC_SCRUB_ST_RANKm_PORTx_BANK_e) )
DECLARE_ENUM_VAL( DDR34LMC_SCRUB_ST_RANKm_PORTx_BANK_n, 3 )
DECLARE_ENUM_VAL( DDR34LMC_SCRUB_ST_RANKm_PORTx_COL_e,  31 )                                                        // Start scrub column
DECLARE_ENUM_VAL( DDR34LMC_SCRUB_ST_RANKm_PORTx_COL_i,  IBM_BIT_INDEX(32, DDR34LMC_SCRUB_ST_RANKm_PORTx_COL_e) )
DECLARE_ENUM_VAL( DDR34LMC_SCRUB_ST_RANKm_PORTx_COL_n,  11 )
END_ENUM( DDR34LMC_SCRUB_ST_RANKm_PORTx_FIELD )


BEGIN_ENUM( DDR34LMC_CALSTAT_FIELD )
DECLARE_ENUM_VAL( DDR34LMC_CALSTAT_PHYUPD_ERR_e,    3 )                                                 // PHY update error
DECLARE_ENUM_VAL( DDR34LMC_CALSTAT_PHYUPD_ERR_i,    IBM_BIT_INDEX(32, DDR34LMC_CALSTAT_PHYUPD_ERR_e) )  // During DFI PHY-initiated update sequences, this field indicates when a timeout
DECLARE_ENUM_VAL( DDR34LMC_CALSTAT_PHYUPD_ERR_n,    4 )                                                 // error is detected during the specified type of PHY update (as indicated by I_DFI_PHYUPD_TYPE[1:0]).
DECLARE_ENUM_VAL( DDR34LMC_CALSTAT_PHYUPD_BUSY_e,   4 )                                                 // PHY Update is in progress. This bit is read-only.
DECLARE_ENUM_VAL( DDR34LMC_CALSTAT_PHYUPD_BUSY_i,   IBM_BIT_INDEX(32, DDR34LMC_CALSTAT_PHYUPD_BUSY_e) )
DECLARE_ENUM_VAL( DDR34LMC_CALSTAT_PHYUPD_BUSY_n,   1 )
END_ENUM( DDR34LMC_CALSTAT_FIELD )


BEGIN_ENUM( DDR34LMC_T_PHYUPDi_FIELD )
DECLARE_ENUM_VAL( DDR34LMC_T_PHYUPD_e,  31 )                                         // PHY update type 0 - 3 timeout (in I_MC_CLOCK cycles)
DECLARE_ENUM_VAL( DDR34LMC_T_PHYUPD_i,  IBM_BIT_INDEX(32, DDR34LMC_T_PHYUPD_e) )    // Maximum number of cycles that the memory controller waits for the PHY to
DECLARE_ENUM_VAL( DDR34LMC_T_PHYUPD_n,  32 )                                        // remove its request on I_DFI_PHYUPD_REQ following the activation of O_DFI_PHYUPD_ACK.
END_ENUM( DDR34LMC_T_PHYUPDi_FIELD )


BEGIN_ENUM( DDR34LMC_SCRUB_ED_RANKm_PORTx_FIELD )
//IBM_REG32_FIELD( DDR34LMC_SCRUB_ED_RANKm_PORTx_BG,        0,  1 ),    Start bank group address <MSb> (only for DDR4)
//IBM_REG32_FIELD( DDR34LMC_SCRUB_ED_RANKm_PORTx_ROW_16,    1,  1 ),    // Start scrub row, For DDR3 mode, ROW[16] is unused.
DECLARE_ENUM_VAL( DDR34LMC_SCRUB_ED_RANKm_PORTx_ROW_e,  17 )                                                         // Start scrub row
DECLARE_ENUM_VAL( DDR34LMC_SCRUB_ED_RANKm_PORTx_ROW_i,  IBM_BIT_INDEX(32, DDR34LMC_SCRUB_ED_RANKm_PORTx_ROW_e) )
DECLARE_ENUM_VAL( DDR34LMC_SCRUB_ED_RANKm_PORTx_ROW_n,  16 )
DECLARE_ENUM_VAL( DDR34LMC_SCRUB_ED_RANKm_PORTx_BANK_e, 20 )                                                        // Start scrub bank
DECLARE_ENUM_VAL( DDR34LMC_SCRUB_ED_RANKm_PORTx_BANK_i, IBM_BIT_INDEX(32, DDR34LMC_SCRUB_ED_RANKm_PORTx_BANK_e) )
DECLARE_ENUM_VAL( DDR34LMC_SCRUB_ED_RANKm_PORTx_BANK_n, 3 )
DECLARE_ENUM_VAL( DDR34LMC_SCRUB_ED_RANKm_PORTx_COL_e,  31 )                                                        // Start scrub column
DECLARE_ENUM_VAL( DDR34LMC_SCRUB_ED_RANKm_PORTx_COL_i,  IBM_BIT_INDEX(32, DDR34LMC_SCRUB_ED_RANKm_PORTx_COL_e) )
DECLARE_ENUM_VAL( DDR34LMC_SCRUB_ED_RANKm_PORTx_COL_n,  11 )
END_ENUM( DDR34LMC_SCRUB_ED_RANKm_PORTx_FIELD )


BEGIN_ENUM( DDR34LMC_ECCERR_ADDR_PORTx_FIELD )
DECLARE_ENUM_VAL( DDR34LMC_ECCERR_ADDR_PORTx_RANK_e,    1 )                                                     // ECC error rank
DECLARE_ENUM_VAL( DDR34LMC_ECCERR_ADDR_PORTx_RANK_i,    IBM_BIT_INDEX(32, DDR34LMC_ECCERR_ADDR_PORTx_RANK_e) )
DECLARE_ENUM_VAL( DDR34LMC_ECCERR_ADDR_PORTx_RANK_n,    2 )
DECLARE_ENUM_VAL( DDR34LMC_ECCERR_ADDR_PORTx_RA_e,      17 )                                                     // ECC error row
DECLARE_ENUM_VAL( DDR34LMC_ECCERR_ADDR_PORTx_RA_i,      IBM_BIT_INDEX(32, DDR34LMC_ECCERR_ADDR_PORTx_RA_e) )
DECLARE_ENUM_VAL( DDR34LMC_ECCERR_ADDR_PORTx_RA_n,      16 )
DECLARE_ENUM_VAL( DDR34LMC_ECCERR_ADDR_PORTx_BA_e,      20 )                                                    // ECC error bank
DECLARE_ENUM_VAL( DDR34LMC_ECCERR_ADDR_PORTx_BA_i,      IBM_BIT_INDEX(32, DDR34LMC_ECCERR_ADDR_PORTx_BA_e) )
DECLARE_ENUM_VAL( DDR34LMC_ECCERR_ADDR_PORTx_BA_n,      3 )
DECLARE_ENUM_VAL( DDR34LMC_ECCERR_ADDR_PORTx_CA_e,      31 )                                                    // ECC error column
DECLARE_ENUM_VAL( DDR34LMC_ECCERR_ADDR_PORTx_CA_i,      IBM_BIT_INDEX(32, DDR34LMC_ECCERR_ADDR_PORTx_CA_e) )
DECLARE_ENUM_VAL( DDR34LMC_ECCERR_ADDR_PORTx_CA_n,      11 )
END_ENUM( DDR34LMC_ECCERR_ADDR_PORTx_FIELD )


BEGIN_ENUM( DDR34LMC_ECCERR_COUNT_PORTx_FIELD )
DECLARE_ENUM_VAL( DDR34LMC_ECCERR_COUNT_PORTx_CE_TCNT_e,    7 )                                                         // This field records the number of correctable ECC errors encountered during
DECLARE_ENUM_VAL( DDR34LMC_ECCERR_COUNT_PORTx_CE_TCNT_i,    IBM_BIT_INDEX(32, DDR34LMC_ECCERR_COUNT_PORTx_CE_TCNT_e) )  // accesses to the SDRAM memory that are no more than the CE threshold. If a CE
DECLARE_ENUM_VAL( DDR34LMC_ECCERR_COUNT_PORTx_CE_TCNT_n,    8 )                                                         // is counted and subsequent accesses to the same address also produce a CE,
                                                                                                                        // these subsequent errors are not accumulated into the CE_TCNT value. If and
                                                                                                                        // when this CE_TCNT value reaches its threshold value, it does not increase.

DECLARE_ENUM_VAL( DDR34LMC_ECCERR_COUNT_PORTx_CE_COUNT_e,   31 )                                                        // This field accumulates the number of correctable ECC errors encountered during
DECLARE_ENUM_VAL( DDR34LMC_ECCERR_COUNT_PORTx_CE_COUNT_i,   IBM_BIT_INDEX(32, DDR34LMC_ECCERR_COUNT_PORTx_CE_COUNT_e) ) // accesses to the SDRAM memory. If a CE is counted and subsequent accesses to
DECLARE_ENUM_VAL( DDR34LMC_ECCERR_COUNT_PORTx_CE_COUNT_n,   20 )                                                        // the same address also produce a CE, these subsequent errors are not accumu-
                                                                                                                        // lated into the CE_COUNT value. If and when this CE_COUNT value reaches its
                                                                                                                        // maximum value, it retains that maximum value (0xFFFFF) and does not wrap back to zero.
END_ENUM( DDR34LMC_ECCERR_COUNT_PORTx_FIELD )



#endif // __DDR_DDR34LMC_REG_FIELD_H__
